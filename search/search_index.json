{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Monalect About Monalect is a personal learning management system meant to allow a user to create and organize their own course to go through, as well as share. Thus allowing other users to be able to go through courses without needing to create their own. The idea is the use can upload their own learning materials by way of pdfs, and link material like lectures, and then the app itself will incorporate it into a place they can learn. That is the basic idea. The vision is that it will eventually lead to a social network where people can study and learn with others. Deadline The deadline for this project is May 31st. That leaves from now (April 26) about 35 days. Enough if I spend them wisely. That's why this website is here. This documentation will serve as a journal, road-map, feature plan, and project requirement document to facilitate its efficient creation.","title":"Monalect"},{"location":"index.html#monalect","text":"","title":"Monalect"},{"location":"index.html#about","text":"Monalect is a personal learning management system meant to allow a user to create and organize their own course to go through, as well as share. Thus allowing other users to be able to go through courses without needing to create their own. The idea is the use can upload their own learning materials by way of pdfs, and link material like lectures, and then the app itself will incorporate it into a place they can learn. That is the basic idea. The vision is that it will eventually lead to a social network where people can study and learn with others.","title":"About"},{"location":"index.html#deadline","text":"The deadline for this project is May 31st. That leaves from now (April 26) about 35 days. Enough if I spend them wisely. That's why this website is here. This documentation will serve as a journal, road-map, feature plan, and project requirement document to facilitate its efficient creation.","title":"Deadline"},{"location":"design/design_system.html","text":"Monalect's Design System Introduction After a great amount of hesitance, I've decided to create Monalect's design from scratch instead of relying on an established design system or library like Bootstrap, or my original choice which was the Carbon Design System. It was done for these reasons: Flexibility: Without being restricted to a design system, I'll be able to be more creative and more inventive with the design I have for Monalect. The Carbon Design System felt too static, too structural, and not \"light\" or modern enough. Brand Character: It gives Monalect a unique brand character. Learning Experience: Creating a design system is a valuable learning experience, that'll allow me to see my website very architecturally, and holistically from start to finish. Extendability: The app isn't the only thing I want to create under Monalect, and it isn't the only thing I want to create ever. Having a design system will cut down much of the time spent designing for those systems as I see it. The cons of this decision is the very big one of it being a lot of work. Regardless I'm willing to do it just because I really enjoy doing it. Something about just putting my head down and doing the work in front of me is desirable to me, instead of the constant research, documentation scrolling and what not you usually have to do using other systems. Managing the Size Design Systems are large, they require teams to work on. Luckily, I'm a genius worth 10 designers, so I don't face that issue. In seriousness, there'll be need to manage a lot of the creation and maintainability of this project. Outsourcing The first clear strategy is to outsource work, which will be necessary to do in the beginning. By oursourcing I just mean using other's people's free work and resources. I've decided to outsource the icons and the typography, for obvious reasons. The work is just far too intensive for even an irrationally grandeous person like me to do. I do plan to come around eventually in the far future. Some icons I'll have to create, for example to represent courses, but it's easy and I've done it before using figma. Consistent and Organized Workflow Another method for making work easy on myself is to develop a consistent and organized workflow. I won't be porting my design system to many different system, it'll be constructed for one system only, which is React.js, or Next.js w/ a global stylesheet (not their module system). The workflow is Figma -> SASS + React.js -> Monalect Design System Package -> Monalect's Frontend And they'll be created as needed, not if needed. This is to help with maintainability, so I don't need to focus on many different implementations. This isn't really for public use as well. The packaging is to help with easy importation. It'll be locally packaged. Ignore Optimization and Keep Simple Consistent Structure I'll be ignoring optimization, and keep my file structure simple and to standard. Sass and Component files will be in seperate folders, and be imported that way. Optimization will just have to suffer. No Animations, nor Dynamic Features These will eventually be created, but initially ignore any extra javascript or css animation. These should be noted somewhere, but they'll be implemented after the setup is done for the entire thing. I Will Still Care About Accessibility If I'd help a disabled person in other ways, then I'd also help them use my website if they find any value in it. So I'll make my design accessible from the beginning, and won't cut corners. This includes a lot of preliminaries. It adds a lot of work, but it's something you learn once through standard, and then incrementally adding/modifying it to user feedback. Maintaining So while I talked about managing the size, and the maintainability, I still have to speak on maintainability itself. Monalect has to be sleek, forward looking and professional which means a bit of upkeep. I'm a quick study, but also a very amateur designer destined to trip into pitfalls and common mistakes that will make maintaining and updating my design a little tricky, since it has a good chance of becoming worse instead of better. I'll want to gather experience quickly through iteration, and quick failure. This means constantly designing, and learning about design. Auditing A practice of auditing the design is necessary. I'll want to do it at the end of every user epic, or essentially when a large task is done. There are a few things to audit: User-Facing Accessibility Consistency Relevancy (not outdated) Design System Violations Development Organization Relevance Modulability There are also guides to use online when I do audit. I should create a personal checklist when I do these audits. Jot Down Ideas The world is abundant with good ideas that require work to give life. However, there's often a decoupling between the moments you get good ideas, and the moments where you need or want to work. It becomes necessary then to write down your ideas somewhere as you go through life, with a mindfulness on the work you're doing. It just comes with habit. If you design a lot, you'll begin to see other websites through that lens of design. There you can get good ideas or find others. Or it may just be random, who knows. Jot down/sketch your ideas when they pop up. Constant Design and Failure? My agile methodology will make it fairly easy to constantly design and experiment. And while I want to design more, I have a lot of other things I need to focus on, so I can't put a lot of hours into design and into failing. So I'll have to ignore that for now. Tools Figma For quick design and creation. Where would we be without figma? This is where I create my designs, which will eventually be implemented in stylesheets and code. Regardless, my figma process is horrible, and is in need of improvement. I spend too much of my time struggling with Figma rather than designing. A lot of this can be solved if I learned more about the platform. I'll want to explore and learn about Figma a little better as I create the design system document there. SASS + React.js For the creation of the actual component. These are the actual tools going to be used to create the components. I've mostly be using this as the \"finalization\" of my figma designs, so my figma designs will often be outdated. This is not a good thing, as it means I can't create websites too easily. This is mostly at a price of using figma, but I honestly don't see the trouble in designing everything using Sass and React.js if the structure and presets in Sass are all set up for easy manipulation. React.js I know well enough that it's straightforward. Sass is a bit more tricky. There are a lot of features in Sass that I don't see the need for. I've only used nesting, variable creation and the parent indicator so far, without making use of ` Next.js For the creation of the design system's website, and display. Next.js will be used to create the design system site. Originally I planned to use storybook, but I included below why I won't be using it. Tools to Look Into Pa11y: An automated accessibility testing tool. Cancelled Tools Storybook: I thought to use storybook for my UI development, but I found its implementation of a global Sass stylesheet obtuse. There was no debugging for styling using their own development server, which was confusing for me. I decided to forego it and just put all my components on a blank page, and use Next.js' development server, pretty much the same. Conclusions So that's what I'm willing to write up for now. I'll add onto this as I create. For now, it's a nice enough plan to know how to work, but I've spent too much time writing this. Till the next iteration.","title":"Monalect's Design System"},{"location":"design/design_system.html#monalects-design-system","text":"","title":"Monalect's Design System"},{"location":"design/design_system.html#introduction","text":"After a great amount of hesitance, I've decided to create Monalect's design from scratch instead of relying on an established design system or library like Bootstrap, or my original choice which was the Carbon Design System. It was done for these reasons: Flexibility: Without being restricted to a design system, I'll be able to be more creative and more inventive with the design I have for Monalect. The Carbon Design System felt too static, too structural, and not \"light\" or modern enough. Brand Character: It gives Monalect a unique brand character. Learning Experience: Creating a design system is a valuable learning experience, that'll allow me to see my website very architecturally, and holistically from start to finish. Extendability: The app isn't the only thing I want to create under Monalect, and it isn't the only thing I want to create ever. Having a design system will cut down much of the time spent designing for those systems as I see it. The cons of this decision is the very big one of it being a lot of work. Regardless I'm willing to do it just because I really enjoy doing it. Something about just putting my head down and doing the work in front of me is desirable to me, instead of the constant research, documentation scrolling and what not you usually have to do using other systems.","title":"Introduction"},{"location":"design/design_system.html#managing-the-size","text":"Design Systems are large, they require teams to work on. Luckily, I'm a genius worth 10 designers, so I don't face that issue. In seriousness, there'll be need to manage a lot of the creation and maintainability of this project.","title":"Managing the Size"},{"location":"design/design_system.html#outsourcing","text":"The first clear strategy is to outsource work, which will be necessary to do in the beginning. By oursourcing I just mean using other's people's free work and resources. I've decided to outsource the icons and the typography, for obvious reasons. The work is just far too intensive for even an irrationally grandeous person like me to do. I do plan to come around eventually in the far future. Some icons I'll have to create, for example to represent courses, but it's easy and I've done it before using figma.","title":"Outsourcing"},{"location":"design/design_system.html#consistent-and-organized-workflow","text":"Another method for making work easy on myself is to develop a consistent and organized workflow. I won't be porting my design system to many different system, it'll be constructed for one system only, which is React.js, or Next.js w/ a global stylesheet (not their module system). The workflow is Figma -> SASS + React.js -> Monalect Design System Package -> Monalect's Frontend And they'll be created as needed, not if needed. This is to help with maintainability, so I don't need to focus on many different implementations. This isn't really for public use as well. The packaging is to help with easy importation. It'll be locally packaged.","title":"Consistent and Organized Workflow"},{"location":"design/design_system.html#ignore-optimization-and-keep-simple-consistent-structure","text":"I'll be ignoring optimization, and keep my file structure simple and to standard. Sass and Component files will be in seperate folders, and be imported that way. Optimization will just have to suffer.","title":"Ignore Optimization and Keep Simple Consistent Structure"},{"location":"design/design_system.html#no-animations-nor-dynamic-features","text":"These will eventually be created, but initially ignore any extra javascript or css animation. These should be noted somewhere, but they'll be implemented after the setup is done for the entire thing.","title":"No Animations, nor Dynamic Features"},{"location":"design/design_system.html#i-will-still-care-about-accessibility","text":"If I'd help a disabled person in other ways, then I'd also help them use my website if they find any value in it. So I'll make my design accessible from the beginning, and won't cut corners. This includes a lot of preliminaries. It adds a lot of work, but it's something you learn once through standard, and then incrementally adding/modifying it to user feedback.","title":"I Will Still Care About Accessibility"},{"location":"design/design_system.html#maintaining","text":"So while I talked about managing the size, and the maintainability, I still have to speak on maintainability itself. Monalect has to be sleek, forward looking and professional which means a bit of upkeep. I'm a quick study, but also a very amateur designer destined to trip into pitfalls and common mistakes that will make maintaining and updating my design a little tricky, since it has a good chance of becoming worse instead of better. I'll want to gather experience quickly through iteration, and quick failure. This means constantly designing, and learning about design.","title":"Maintaining"},{"location":"design/design_system.html#auditing","text":"A practice of auditing the design is necessary. I'll want to do it at the end of every user epic, or essentially when a large task is done. There are a few things to audit: User-Facing Accessibility Consistency Relevancy (not outdated) Design System Violations Development Organization Relevance Modulability There are also guides to use online when I do audit. I should create a personal checklist when I do these audits.","title":"Auditing"},{"location":"design/design_system.html#jot-down-ideas","text":"The world is abundant with good ideas that require work to give life. However, there's often a decoupling between the moments you get good ideas, and the moments where you need or want to work. It becomes necessary then to write down your ideas somewhere as you go through life, with a mindfulness on the work you're doing. It just comes with habit. If you design a lot, you'll begin to see other websites through that lens of design. There you can get good ideas or find others. Or it may just be random, who knows. Jot down/sketch your ideas when they pop up.","title":"Jot Down Ideas"},{"location":"design/design_system.html#constant-design-and-failure","text":"My agile methodology will make it fairly easy to constantly design and experiment. And while I want to design more, I have a lot of other things I need to focus on, so I can't put a lot of hours into design and into failing. So I'll have to ignore that for now.","title":"Constant Design and Failure?"},{"location":"design/design_system.html#tools","text":"","title":"Tools"},{"location":"design/design_system.html#figma","text":"For quick design and creation. Where would we be without figma? This is where I create my designs, which will eventually be implemented in stylesheets and code. Regardless, my figma process is horrible, and is in need of improvement. I spend too much of my time struggling with Figma rather than designing. A lot of this can be solved if I learned more about the platform. I'll want to explore and learn about Figma a little better as I create the design system document there.","title":"Figma"},{"location":"design/design_system.html#sass-reactjs","text":"For the creation of the actual component. These are the actual tools going to be used to create the components. I've mostly be using this as the \"finalization\" of my figma designs, so my figma designs will often be outdated. This is not a good thing, as it means I can't create websites too easily. This is mostly at a price of using figma, but I honestly don't see the trouble in designing everything using Sass and React.js if the structure and presets in Sass are all set up for easy manipulation. React.js I know well enough that it's straightforward. Sass is a bit more tricky. There are a lot of features in Sass that I don't see the need for. I've only used nesting, variable creation and the parent indicator so far, without making use of `","title":"SASS + React.js"},{"location":"design/design_system.html#nextjs","text":"For the creation of the design system's website, and display. Next.js will be used to create the design system site. Originally I planned to use storybook, but I included below why I won't be using it.","title":"Next.js"},{"location":"design/design_system.html#tools-to-look-into","text":"Pa11y: An automated accessibility testing tool.","title":"Tools to Look Into"},{"location":"design/design_system.html#cancelled-tools","text":"Storybook: I thought to use storybook for my UI development, but I found its implementation of a global Sass stylesheet obtuse. There was no debugging for styling using their own development server, which was confusing for me. I decided to forego it and just put all my components on a blank page, and use Next.js' development server, pretty much the same.","title":"Cancelled Tools"},{"location":"design/design_system.html#conclusions","text":"So that's what I'm willing to write up for now. I'll add onto this as I create. For now, it's a nice enough plan to know how to work, but I've spent too much time writing this. Till the next iteration.","title":"Conclusions"},{"location":"design/vision.html","text":"Vision Statement Outline Introduction to what monalect is, the app, the organization serving learning tools for people. A social media for learning. An organization for self-learning. Principles Vision A world where people can boot up a computer, open up monalect, and begin learning. Connect self-learners, students, and anyone trying to learn through backround studies. Mission Introduction Monalect is a course manager that provides a place for those learning by themselves to organize and study their own gathered material. You can import or create the course. You can study the course. You can share the course with others to finish. Principles Egalitarianism: No user should be less able to learn with our app than other users. User Control: The user should be in total control over their own learning. We don't impose deadlines, don't create the courses to study, make you \"enroll\", we don't impose requirements, or prerequisites, etc. Realism: The user should perceive the depth of their ignorance towards a subject they're learning, but in such a way that they develop respect for the material instead of an intimidation. Open Source Education Resources MIT OpenCourseWare This is an open repository of courses and their materials from MIT, where users can check out course structures, get questions, essasy, reading material, schedules, etc. Monalect is heavily inspired by MIT OCW and the idea that it can become a framework for its own learning management system using material (pdfs, youtube lectures, etc.) gathered from other websites online. Open Textbook Library This is a collection of free textbooks for anyone to download. A highly valuable resource, Monalect was made for this resource. Download your textbooks from here and upload them to Monalect for your courses. The open access movement in general is an inspiration for Monalect. Libary Genesis & Sci-Hub While Monalect does not condone copyright infringement, these tools have become invaluable for open-access education. Almost every top quality textbook and learning material, and almost every scientific article are here for free without the insane prices publishers usually charge for. It's still illegal, so it isn't condoned or supported, however we don't check where you get your pdfs from, nor will we ever care to check. Your finances shouldn't dictate the quality of your education, and thanks to these resources, they don't.","title":"Vision Statement"},{"location":"design/vision.html#vision-statement","text":"","title":"Vision Statement"},{"location":"design/vision.html#outline","text":"Introduction to what monalect is, the app, the organization serving learning tools for people. A social media for learning. An organization for self-learning. Principles Vision A world where people can boot up a computer, open up monalect, and begin learning. Connect self-learners, students, and anyone trying to learn through backround studies. Mission","title":"Outline"},{"location":"design/vision.html#introduction","text":"Monalect is a course manager that provides a place for those learning by themselves to organize and study their own gathered material. You can import or create the course. You can study the course. You can share the course with others to finish.","title":"Introduction"},{"location":"design/vision.html#principles","text":"Egalitarianism: No user should be less able to learn with our app than other users. User Control: The user should be in total control over their own learning. We don't impose deadlines, don't create the courses to study, make you \"enroll\", we don't impose requirements, or prerequisites, etc. Realism: The user should perceive the depth of their ignorance towards a subject they're learning, but in such a way that they develop respect for the material instead of an intimidation.","title":"Principles"},{"location":"design/vision.html#open-source-education","text":"","title":"Open Source Education"},{"location":"design/vision.html#resources","text":"","title":"Resources"},{"location":"design/vision.html#mit-opencourseware","text":"This is an open repository of courses and their materials from MIT, where users can check out course structures, get questions, essasy, reading material, schedules, etc. Monalect is heavily inspired by MIT OCW and the idea that it can become a framework for its own learning management system using material (pdfs, youtube lectures, etc.) gathered from other websites online.","title":"MIT OpenCourseWare"},{"location":"design/vision.html#open-textbook-library","text":"This is a collection of free textbooks for anyone to download. A highly valuable resource, Monalect was made for this resource. Download your textbooks from here and upload them to Monalect for your courses. The open access movement in general is an inspiration for Monalect.","title":"Open Textbook Library"},{"location":"design/vision.html#libary-genesis-sci-hub","text":"While Monalect does not condone copyright infringement, these tools have become invaluable for open-access education. Almost every top quality textbook and learning material, and almost every scientific article are here for free without the insane prices publishers usually charge for. It's still illegal, so it isn't condoned or supported, however we don't check where you get your pdfs from, nor will we ever care to check. Your finances shouldn't dictate the quality of your education, and thanks to these resources, they don't.","title":"Libary Genesis &amp; Sci-Hub"},{"location":"design/writing_guidelines.html","text":"Writing Guidelines Introduction These are the guidelines for the website's writing, primarily concerned with the blog posts, updates, and what not. This isn't really for the app. This guidelines won't include a style manual. I'm an avid writer, I have a \"style manual\" already in my head for the way I personally write, and inconsistency isn't hard for me to catch. This writing guide is really just supposed to help me keep consistent with the more abstract parts of writing. Voice Concerns There are a lot of things to consider here. Monalect is an academic-focused application, but academic writing is dry and full of jargon. It doesn't exactly attract people. Monalect is also a personal passion project, so it's bound to be invaded by my rambling and manic tone. I originally wanted it to be warm and kind, but found trouble being warm and kind in an instructive manner. It also threatens to express inconfidence instead of kindness. Writing too formally or linguistically can also intimidate people, yet I also wish to express professionalism somehow so I'm not seen as childish. This isn't impossible, or perhaps even hard. Someone can be mature without being a sesquipedalian. Guidelines In general: Don't be aggressive Try to be passive and kind To avoid inconfidence, avoid addressing concerns or counter-arguments until the end the of the text where you can address them. Instructions will just be normal, but don't threaten or shut down the user. Always explain why a feature disallows something. Be mature and formal Don't say \"you\". Be concise Don't repeat sentences. No unnecessary words, no adverbs. Be clear Don't use overly complicated words. In general, most of my posts will hold the same tone. Process Research -> Outline/Planning -> Rough Draft <-> Final Draft -> Publish Pretty typical. Don't take too long on any of these. Just head all the way to the rough-draft final-draft loop, and go as fast as you can until it becomes good.","title":"Writing Guidelines"},{"location":"design/writing_guidelines.html#writing-guidelines","text":"","title":"Writing Guidelines"},{"location":"design/writing_guidelines.html#introduction","text":"These are the guidelines for the website's writing, primarily concerned with the blog posts, updates, and what not. This isn't really for the app. This guidelines won't include a style manual. I'm an avid writer, I have a \"style manual\" already in my head for the way I personally write, and inconsistency isn't hard for me to catch. This writing guide is really just supposed to help me keep consistent with the more abstract parts of writing.","title":"Introduction"},{"location":"design/writing_guidelines.html#voice","text":"","title":"Voice"},{"location":"design/writing_guidelines.html#concerns","text":"There are a lot of things to consider here. Monalect is an academic-focused application, but academic writing is dry and full of jargon. It doesn't exactly attract people. Monalect is also a personal passion project, so it's bound to be invaded by my rambling and manic tone. I originally wanted it to be warm and kind, but found trouble being warm and kind in an instructive manner. It also threatens to express inconfidence instead of kindness. Writing too formally or linguistically can also intimidate people, yet I also wish to express professionalism somehow so I'm not seen as childish. This isn't impossible, or perhaps even hard. Someone can be mature without being a sesquipedalian.","title":"Concerns"},{"location":"design/writing_guidelines.html#guidelines","text":"In general: Don't be aggressive Try to be passive and kind To avoid inconfidence, avoid addressing concerns or counter-arguments until the end the of the text where you can address them. Instructions will just be normal, but don't threaten or shut down the user. Always explain why a feature disallows something. Be mature and formal Don't say \"you\". Be concise Don't repeat sentences. No unnecessary words, no adverbs. Be clear Don't use overly complicated words. In general, most of my posts will hold the same tone.","title":"Guidelines"},{"location":"design/writing_guidelines.html#process","text":"Research -> Outline/Planning -> Rough Draft <-> Final Draft -> Publish Pretty typical. Don't take too long on any of these. Just head all the way to the rough-draft final-draft loop, and go as fast as you can until it becomes good.","title":"Process"},{"location":"design/writing_ideas.html","text":"Writing Ideas Introduction A list of plannings, outlines, and ideas for my ideas. I'll also write the rough drafts here, most likely. Blog Structure: Title Summary Bullet Points Content Body Resources Ideas Physics Reading Map Math Reading Map Computer Science Reading Map MIT Course Map Vision Statement Sections Introduction Philosophy Principles Inspirations Objective (Mission) Problem with Education Online How we Solve It Design Philosophy Milestones MVP Major Features and Whether They've Been Implemented KPIs","title":"Writing Ideas"},{"location":"design/writing_ideas.html#writing-ideas","text":"","title":"Writing Ideas"},{"location":"design/writing_ideas.html#introduction","text":"A list of plannings, outlines, and ideas for my ideas. I'll also write the rough drafts here, most likely. Blog Structure: Title Summary Bullet Points Content Body Resources","title":"Introduction"},{"location":"design/writing_ideas.html#ideas","text":"Physics Reading Map Math Reading Map Computer Science Reading Map MIT Course Map","title":"Ideas"},{"location":"design/writing_ideas.html#vision-statement","text":"","title":"Vision Statement"},{"location":"design/writing_ideas.html#sections","text":"Introduction Philosophy Principles Inspirations Objective (Mission) Problem with Education Online How we Solve It Design Philosophy Milestones MVP Major Features and Whether They've Been Implemented KPIs","title":"Sections"},{"location":"journal/ideas.html","text":"Ideas Just a collection of ideas colelcted by date. 2022.05.02 Page up and Page down buttons disable smooth-scrolling in the webapp, this makes it a lot more immediate and comfortable to use in browser. 2022.05.07 Bullet-point of the blog post before going into the blog-post so user immediately knows what it's about, and can read on for further detail. Learning communities are tricked into marketing for themselves to increase their user base. Provide a map or system of studying things to their depth. What I mean by that is, when a novice starts out, they don't know what level they're at and they can become lost trying to learn a subject. If they have levels like \"master\" \"novice\" \"proficient\" \"genius\" and can see where they're at, they can have a goal to aspire to. I made this distinction somewhere. I'll put it here. Student: Reading textbooks. Researcher: Moving onto reading academic papers, producing things like literature reviews. Theorist: Creating theory and research. Proficient: Gaining social and self-recognition through your own theory. God: Creating or redefining scenes and paradigms through theory and/or research work. It's very amateur, I wrote that awhile ago and it's tied in with a whole lot of philosophical baggage. The \"God\" would be people like Titchener, or Kuhn. Kuhn being a direct inspiration of it. I'll lessen the scope of it, make it go up to theorist, and give more detail into it. I'll also want to actually read into the way academia is structured so I can better accurately define the levels of academic \"depth\". I question how I'm going to show it to the user. Should I even think of penetrating academia this way? I enjoy the thought/challenge of trying to create a wholly self-taught academic who ends up becoming atleast or profficient or god-like. Disclaimer, I know how silly it is to assign levels like this and you can question concepts like the \"depth\" of a field, but it's an incredibly helpful way of contextualizing academia and having something to look forward to.","title":"Ideas"},{"location":"journal/ideas.html#ideas","text":"Just a collection of ideas colelcted by date.","title":"Ideas"},{"location":"journal/ideas.html#20220502","text":"Page up and Page down buttons disable smooth-scrolling in the webapp, this makes it a lot more immediate and comfortable to use in browser.","title":"2022.05.02"},{"location":"journal/ideas.html#20220507","text":"Bullet-point of the blog post before going into the blog-post so user immediately knows what it's about, and can read on for further detail. Learning communities are tricked into marketing for themselves to increase their user base. Provide a map or system of studying things to their depth. What I mean by that is, when a novice starts out, they don't know what level they're at and they can become lost trying to learn a subject. If they have levels like \"master\" \"novice\" \"proficient\" \"genius\" and can see where they're at, they can have a goal to aspire to. I made this distinction somewhere. I'll put it here. Student: Reading textbooks. Researcher: Moving onto reading academic papers, producing things like literature reviews. Theorist: Creating theory and research. Proficient: Gaining social and self-recognition through your own theory. God: Creating or redefining scenes and paradigms through theory and/or research work. It's very amateur, I wrote that awhile ago and it's tied in with a whole lot of philosophical baggage. The \"God\" would be people like Titchener, or Kuhn. Kuhn being a direct inspiration of it. I'll lessen the scope of it, make it go up to theorist, and give more detail into it. I'll also want to actually read into the way academia is structured so I can better accurately define the levels of academic \"depth\". I question how I'm going to show it to the user. Should I even think of penetrating academia this way? I enjoy the thought/challenge of trying to create a wholly self-taught academic who ends up becoming atleast or profficient or god-like. Disclaimer, I know how silly it is to assign levels like this and you can question concepts like the \"depth\" of a field, but it's an incredibly helpful way of contextualizing academia and having something to look forward to.","title":"2022.05.07"},{"location":"journal/marketing.html","text":"Marketing Stuff Preliminaries User Persona The user personas are not going to be accurate in the beginning, because it's not going to be data-driven. Rather, it's based on pure speculation. Autodidact So the type of person we're after in the beginning is the autodidact, of which there are three types: the people that hate schooling, the people who want to learn something by themselves so they can accomplish something else, and the people who want to learn out of curiosity and genuine interest. They can overlap, of course but I'll name them: unschool, temporary, curious. The unschoolers want a whole different way to study. They hate school, they hate its restrictions, and they believe it's perverted the way we study. My app will provide them a way to study by themselves using the academic structure, but where they're in control. It's difficult because I'm essentially replicating the structure, but so long as they're fine with the popular way of studying, then it'll be fine. So long as they don't believe in alternative study methods. What keeps all the autodidacts away from their goal, which is to study a field to its depth, is the fact that online resources are of rather poor quality, there are not many ways to socialize with others about what you're learning, it's difficult to be motivated enough to study by yourself with scattered tooling, it's easy to get lost about what you're studying. Student Then the second type of person we're going for is the student who may want to use monalect as a way to manage their schooling by themselves, and use it as a study tool that mirrors their courses in a different institution. In this field, we're competing directly with the learning management systems that the universities themselves are using, and tools like google docs, and what have you. What would stop them is the disorganization of their studies, a disatisfaction with their tooling, and disatisfaction with traditional learning management systems. Channels I don't want to split myself across many different channels right now, instead I'm going to focus on the most fruitful ones. I can work on blogging, video-making, and social media as a way of disseminating my content. Making videos and blogging at the same time will be a lot of work though. I'll want to take it incrementally, either video making first or blogging first, and then optimizing my time until I can fit the other in. I'll choose blogging so as to fill my website up with content, and (personal) social media. My personality will just have to be intertwined, there won't be company channels. Thus, the only content creation framework I'll have is for my blog. Tools I know my front-end tools, and the CMS, but I need thought on organization for the process itself. Using Trello would be a really good way of doing it, writing down ideas and using various things for them. Content Creation Scheduling To schedule, I'll just use a normal system. The best time to publish a blog is... I forgot. I wrote it down somewhere. Let me grep it. I can't find it. I think I chose Sundarys at 9am. Anyways, the idea is I have a rough draft submitted by sunday, and then I have a post edited by sunday, and then I have another scheduled to be published on sunday, so two overlapping posts being worked on, with a third one being waited to be pushed at any given time. It'll space apart the work nicely, enough that I can focus on putting out high-quality material. So for the week, I should be working on the outline, spending the rest of the week creating the draft. The week after that, I work on creating a new draft, while also editing the previous week's draft. But I don't want to have to wait for 3 weeks to have my first blog post. I'll just have to work a little harder then, and as soon as the rough draft is done, I begin working on the editing until I do enter those 3 overlapping posts per a week. I'll want to create a guide then on how my posts should be structured. Topics I Want to Become an Authority On Autodidacticism Online Learning Academia Initial Academic Subjects Math Philosophy Linguistics Logic Rigorous Self-Education Intellectualism Structure I know the general structure, I wrote it down in my writing guidelines. Title Summary Contents Body Resources Quality Utmost quality. Communities Autodidactic Community","title":"Marketing Stuff"},{"location":"journal/marketing.html#marketing-stuff","text":"","title":"Marketing Stuff"},{"location":"journal/marketing.html#preliminaries","text":"","title":"Preliminaries"},{"location":"journal/marketing.html#user-persona","text":"The user personas are not going to be accurate in the beginning, because it's not going to be data-driven. Rather, it's based on pure speculation.","title":"User Persona"},{"location":"journal/marketing.html#autodidact","text":"So the type of person we're after in the beginning is the autodidact, of which there are three types: the people that hate schooling, the people who want to learn something by themselves so they can accomplish something else, and the people who want to learn out of curiosity and genuine interest. They can overlap, of course but I'll name them: unschool, temporary, curious. The unschoolers want a whole different way to study. They hate school, they hate its restrictions, and they believe it's perverted the way we study. My app will provide them a way to study by themselves using the academic structure, but where they're in control. It's difficult because I'm essentially replicating the structure, but so long as they're fine with the popular way of studying, then it'll be fine. So long as they don't believe in alternative study methods. What keeps all the autodidacts away from their goal, which is to study a field to its depth, is the fact that online resources are of rather poor quality, there are not many ways to socialize with others about what you're learning, it's difficult to be motivated enough to study by yourself with scattered tooling, it's easy to get lost about what you're studying.","title":"Autodidact"},{"location":"journal/marketing.html#student","text":"Then the second type of person we're going for is the student who may want to use monalect as a way to manage their schooling by themselves, and use it as a study tool that mirrors their courses in a different institution. In this field, we're competing directly with the learning management systems that the universities themselves are using, and tools like google docs, and what have you. What would stop them is the disorganization of their studies, a disatisfaction with their tooling, and disatisfaction with traditional learning management systems.","title":"Student"},{"location":"journal/marketing.html#channels","text":"I don't want to split myself across many different channels right now, instead I'm going to focus on the most fruitful ones. I can work on blogging, video-making, and social media as a way of disseminating my content. Making videos and blogging at the same time will be a lot of work though. I'll want to take it incrementally, either video making first or blogging first, and then optimizing my time until I can fit the other in. I'll choose blogging so as to fill my website up with content, and (personal) social media. My personality will just have to be intertwined, there won't be company channels. Thus, the only content creation framework I'll have is for my blog.","title":"Channels"},{"location":"journal/marketing.html#tools","text":"I know my front-end tools, and the CMS, but I need thought on organization for the process itself. Using Trello would be a really good way of doing it, writing down ideas and using various things for them.","title":"Tools"},{"location":"journal/marketing.html#content-creation","text":"","title":"Content Creation"},{"location":"journal/marketing.html#scheduling","text":"To schedule, I'll just use a normal system. The best time to publish a blog is... I forgot. I wrote it down somewhere. Let me grep it. I can't find it. I think I chose Sundarys at 9am. Anyways, the idea is I have a rough draft submitted by sunday, and then I have a post edited by sunday, and then I have another scheduled to be published on sunday, so two overlapping posts being worked on, with a third one being waited to be pushed at any given time. It'll space apart the work nicely, enough that I can focus on putting out high-quality material. So for the week, I should be working on the outline, spending the rest of the week creating the draft. The week after that, I work on creating a new draft, while also editing the previous week's draft. But I don't want to have to wait for 3 weeks to have my first blog post. I'll just have to work a little harder then, and as soon as the rough draft is done, I begin working on the editing until I do enter those 3 overlapping posts per a week. I'll want to create a guide then on how my posts should be structured.","title":"Scheduling"},{"location":"journal/marketing.html#topics-i-want-to-become-an-authority-on","text":"Autodidacticism Online Learning Academia Initial Academic Subjects Math Philosophy Linguistics Logic Rigorous Self-Education Intellectualism","title":"Topics I Want to Become an Authority On"},{"location":"journal/marketing.html#structure","text":"I know the general structure, I wrote it down in my writing guidelines. Title Summary Contents Body Resources","title":"Structure"},{"location":"journal/marketing.html#quality","text":"Utmost quality.","title":"Quality"},{"location":"journal/marketing.html#communities","text":"","title":"Communities"},{"location":"journal/marketing.html#autodidactic-community","text":"","title":"Autodidactic Community"},{"location":"journal/requirements.html","text":"Development Requirements As I'm going through the project, I'm collecting a lot of different requirements for my stuff. I'd enjoy collecting it, and making it a future resource for me to use. Accessibility Requirements WCAG Stuff Text Color Contrasts Use this: https://webaim.org/resources/contrastchecker/ (AAA) Normal text has a contrast of >7:1 Large text (more than 18pt or 14pt bold) has a contrast of >4.5:1 Components Not just for creation, but also whenever it's used. Buttons Text Contrast name attribute filled Icon buttons has aria-label filled. use button element, but if not using it, use role=\"button\" for the element replacing the button text resizeable to 200% Text Input Use labels Favour explicit labels, they have greater accessibility support. Use for attribute in explicit labels to associate with the input text.","title":"Development Requirements"},{"location":"journal/requirements.html#development-requirements","text":"As I'm going through the project, I'm collecting a lot of different requirements for my stuff. I'd enjoy collecting it, and making it a future resource for me to use.","title":"Development Requirements"},{"location":"journal/requirements.html#accessibility-requirements","text":"","title":"Accessibility Requirements"},{"location":"journal/requirements.html#wcag-stuff","text":"","title":"WCAG Stuff"},{"location":"journal/requirements.html#text-color-contrasts","text":"Use this: https://webaim.org/resources/contrastchecker/ (AAA) Normal text has a contrast of >7:1 Large text (more than 18pt or 14pt bold) has a contrast of >4.5:1","title":"Text Color Contrasts"},{"location":"journal/requirements.html#components","text":"Not just for creation, but also whenever it's used.","title":"Components"},{"location":"journal/requirements.html#buttons","text":"Text Contrast name attribute filled Icon buttons has aria-label filled. use button element, but if not using it, use role=\"button\" for the element replacing the button text resizeable to 200%","title":"Buttons"},{"location":"journal/requirements.html#text-input","text":"Use labels Favour explicit labels, they have greater accessibility support. Use for attribute in explicit labels to associate with the input text.","title":"Text Input"},{"location":"journal/2022/april.html","text":"April 26 Time Worked: 6 hours April 27 [6:53am] The first day I'm writing here. I have another dev journal, but I'll start anew here. Last night, I quickly setup the new design for the landing page that's a step better than before. Today I'll set things up to use in Next.js. I set it up enough that I had a complete system, but I'll want to revisit the styling. I used Next's module css system, but found that they want you to use their own classing system. I thought it would be better to develop it seperately in Sass, and just globally import what's necessary, which should be almost all of it. The new design uses a fun color scheme. I'll want to play around with it later to create more components. I noticed an issue with some of the button colors, so I'll want to expand my color palette a bit. I'm using a gradient scheme, but it clashes with semantic colors as the opposite side of the gradient is a maroon red, which means it can't really be used for button color. Anyways, I'll figure it out. I'll just probably switch up the gradient with an academic gold. For now, I'll quickly write up the landing page, which shouldn't take much time and \"setup\", the only 3 components I see are the header, text-input, and button, with the latter two being omitted in the final product until I can setup an API to take in the email. Anywho, for today, I'll have the landing done, then create the design for the blog which should take me the rest of the day, realistically. By the end I'll want to then organize my documentation here a little bit and have it out there. I have a dentist's appointment. Hopefully it won't take too much time. It should just be a checkup, and I'll be back to work. Time Worked: 6.5 hours April 28 [1:03pm] Looking back, I'm unhappy with my hours yesterday. I woke up early, and I should've been able to work for most of the day. I'll make up for it today. I'm currently working on implementing the blog. I just wanted to add some things here to put on the blog later on. Fix loading jank (mostly caused by waiting for the css to load in google fonts, which after it's cached it doesn't become a problem, but I want to at least make the initial load clean) [3:04pm] The blog is going to take some time, but I figured out how to set it up. The real problem so far is the mess that this is becoming. I'll really need to take a moment and break this website down when I eventually have to. For now, just finish it. Time Worked: 7.5 hours April 29 [7:13am] I'm still surprised I only worked seven and a half hours yesterday. It felt much longer. I blame the fact that I forget to turn the timer on and still work. But, I finished the blog finally. I'll have to rewrite my first post, as it's something I rambled together quickly to just have up there when I make it live for the first time. A few things to remember for later: Add social media support personal social media (of author >.>) share with others Make all pages responsive Make the blog header a link with a hover style Today I'm just going to be refactoring and reorganizing code. I made a mess creating the website last night, I just want to have it cleaned. Then I'll create the designs for the \"Plans\" and \"About Me\" section, which shouldn't take too long. I'll think of how to reorganize it here because it's a bit of a confusion. So I can split it up into two things to organize: Style, and code. The SASS styling can be split up further into page styles, and then component styles. Page styles will be imported into the main, global sass file. I'll want to break up the page into various components then, and show that through code. Then I'll go through their styles. There are some things that are tricky. The header, for example, highlights depending on what's the current active link or path. If a turn it into a component, I need some way to check. I think I can do it easily enough however by simply making it a prop that tells the link what path is active, and then subsequently adds an active class to the active link. I'll also want to create a better design system. So far, only the colors are really part of the \"system\", and perhaps some components. But I can make it better. One of the things is whether I use a tagging system like .mn--post-card.mn--small or just .mn--post-card-small for the component class. Some research is necessary. I'll look into Sass styling architectures. [7:57am] Whenever I do Sass styling, I don't do any form of nesting. Perhaps I should. [10:11am] Okay, I've cleaned a bit . Not enough, but enough that I can work on the next two pages without feeling messy. After finishing the surface-site (I'm calling it that, I can't figure out a name), I'll go on to create the design system a little more thoroughly. But now, I got to return to the documentation and finishing up my user stories. I'll put this page up using github pages instead of cloudflare's pages. [11:56am] Done, although there wasn't much to do. Next thing I want to do is create the plans and about me section. I'll clean it up a bit more, and then begin work on the design system. Ah, actually I have a bit more to do. I'll want to set up the tasklist for the design system. I thought to make user stories with it, but I think there's a limit to how much I can stretch the concept. I'll instead just create a normal tasklist. [2:14pm] My breaks are becoming too long, a sign that I'm becoming disinterested. Not very good. I have to create a feature page now, and I realized I needed to create content. However, the content I create will have to be in static html. I think I'm going to make it a markdown file that nextjs automatically renders, as I'll likely have to update it and I'm not going to deal with the mess of editing html. I'll create the content first, then integrate it. [8:10pm] I haven't done as much as I wished today. I worked a lot, but a good chunk of it had been spent writing rambly content for my website. I finished the the website, but I rushed the about me and \"vision\" page so it's a bit sloppy, but I'll improve them eventually. I'll want to focus now on getting a start on the design system. I'll decide later whether to come back on them and improve them with my designed system. For now, a lot of typing and creative thinking. Ugh. Time Worked: 9 hours April 30 [9:17am] Woke up a little later today, but that's okay. Today I'm just creating the first iteration of the design system. There are some things that can be improved from the work I did yesterday, mostly under the \"language\" part of it. There's also the concern of accessibility which I find myself having trouble with. The guidelines aren't just \"do this for this\", they use a lot of jargon and technical stuff that makes it more complicated than it needs to be. But that's the nature of standards, usually. I'll just have to go through it. I don't have to care about accessibility on a personal project, but I find importance and obligation in it. If I would help a blind man cross my street, then I would help a blind man navigate my website. And it goes with other disabilities as well. It's just basic human decency, especially if my project is something they find value in. The biggest danger is that I feel it isn't important enough, but I will try regardless. Anyways, I got to work on the dsign system today. I highly doubt I'll finish it today, but I'll want to set up a new repository where I can work on creating all the components without needing to feel tied to it. A concern is typography. Working on a font requires a lot more study, research, and experience than I'm willing to put in this early into the design. I went with IBM's Plex font so far, but I think I'll check out Knuth's Computer Modern just for the nerdyness of it. [10:52am] Okay, I'm sticking with the IBM typography. [11:37am] AAGHGHGHAAHGH. I hate colour schemes. I've been stuck on this for an hour and a half, trying to pick colours. I have a colour scheme already, but it uses cool colours, and I wanted my website to be warm. However, warm colours look ugly. Bah, I'm an academic website, I don't need to be warm. Agh, and I have to create icons and stuff too. Or at least find some. Okay, I can do this, but I need a space I can collect all of my stuff in so I can use later. [11:50am] I got in in way over my head. Is it too late? The thing is, going with a design system can become limiting. But okay, lets split this up into manageable pieces: Should I create a new repository for my design system? No, that is insane. Work within the website itself using sass and components. Do I need to have a css grid system instead of a flex-box system for my design? That's the way design systems seem to lean towards, however it's not that simple. It's more like how padding, margins, sizing and spacing is made consistent. So for example, allowing only options of 16px, 24px, 32px. Apparently, people in Sass make their own grid system. How do I organize my design system? Where do I create it then if I can't make a repository? You organize it in your website through components and sass. Don't create a design system, just create the seeds of one. If I'm working on a very large project, I feel a design system is necessary if I wish to extend it, update it and maintain it easily. It'll allow me to also learn and think of my website in an organized method. fine Use storybook to build your design system components. Use figma for coming up with the actual designs of these components How do i know what components to use? You don't. Your project can turn a many ways. Instead create components that are universally [1:01p] Storybook looks promising. They have a nice article on creating a design system that I want to look at after figuring out how to use storybook. It doesn't address things like spacing, and Sass however. I think I'll just use the Carbon Design System's method, which is to just make the sass seperate from the JSX component exports. Then after that you create a folder that contains all the components in a holistic style. [2:16pm] I set up storybook, now I'm dealing with the problem of figuring out what buttons I need. Okay, so now to create a whole system, I'll need storybook to use a main.scss file, using a sass folder that I have. I'll want to look into proper class creation in sass. For now, lets create a simple button component. [3:27pm] I created it, but I'm unhappy with the way storybook displays css. It says it's a UI constructor, but their Sass support is horrid. Anyways, I made it work. What's the point of being a UI constructor, if it's hard to do basic styling? Bah, anyways. Atleast it autoloads components into a system that I can see and manipulate fairly quickly. I did look into class naming, and I'm going to follow this guy's: https://bradfrost.com/blog/post/css-architecture-for-design-systems/ But my eyes are bleeding now. I've been staring at a screen for 4 hours straight trying to understand this. But now that I have something set up, I can begin work. I have to question how to organize sass. My components each have their own sass file, but I think I'll take everything and put it into a seperate sass folder to use. [4:21pm] My brain was turning to mush so I took a short break. Just a note for the future: Use GraphQL. [9:16pm] I'm calling it in for the day. A few things: I gave up with storybook. The way I wanted to implement my component styles, which was as a global sass stylesheet, was incompatable with it for some reason. I couldn't debug, so I just said \"screw it\" and made a Next.js app with an empty page that displays the components I set in. So far the design is nice. I \"finished\" the buttons. I still have to do the \"disabled\" state of the button, but so far the buttons are usable. I'm working currently on the text input, and that should be enough for me to get started. I questioned whether to even use figma for setting up my components, as it felt like I was set up to just make them in css anyways. At most, I'd figure out the layout, but I feel like I could do that on pen and paper, then just use the component method to implement it. Today was one of those days where I worked a lot, but felt like progress was little. I have a design system started, but it's going to be a lot of work. I'll want to go through the design more efficiently and quickly. I'm going to use a free set of icons to use with my system as well. Tomorrow I might take it a bit more easy. Struggling with storybook really took a lot of my energy away. I want to try and re-write my main website content, and then write a few ideas for interesting media to incorporate with my website. For some reason, I'm thinking of a small green tree, on a white pot. An ocean is out there. Sort of like that. But anyways, I'm going to go sleep now and wake up tomorrow. I want to think a little more about my plan, I'm getting a little lost over what I'm doing and want to stop designing. Now that I have the design method set up, I should be focusing instead on implementing features. Create components and designs based on the log-in form for example. I should try and create the tickets for monalect and start a trello board. But anyways, I'm getting dead tired. I'll see you tomorrow. Time Worked: 8 hours","title":"April"},{"location":"journal/2022/april.html#april-26","text":"Time Worked: 6 hours","title":"April 26"},{"location":"journal/2022/april.html#april-27","text":"[6:53am] The first day I'm writing here. I have another dev journal, but I'll start anew here. Last night, I quickly setup the new design for the landing page that's a step better than before. Today I'll set things up to use in Next.js. I set it up enough that I had a complete system, but I'll want to revisit the styling. I used Next's module css system, but found that they want you to use their own classing system. I thought it would be better to develop it seperately in Sass, and just globally import what's necessary, which should be almost all of it. The new design uses a fun color scheme. I'll want to play around with it later to create more components. I noticed an issue with some of the button colors, so I'll want to expand my color palette a bit. I'm using a gradient scheme, but it clashes with semantic colors as the opposite side of the gradient is a maroon red, which means it can't really be used for button color. Anyways, I'll figure it out. I'll just probably switch up the gradient with an academic gold. For now, I'll quickly write up the landing page, which shouldn't take much time and \"setup\", the only 3 components I see are the header, text-input, and button, with the latter two being omitted in the final product until I can setup an API to take in the email. Anywho, for today, I'll have the landing done, then create the design for the blog which should take me the rest of the day, realistically. By the end I'll want to then organize my documentation here a little bit and have it out there. I have a dentist's appointment. Hopefully it won't take too much time. It should just be a checkup, and I'll be back to work. Time Worked: 6.5 hours","title":"April 27"},{"location":"journal/2022/april.html#april-28","text":"[1:03pm] Looking back, I'm unhappy with my hours yesterday. I woke up early, and I should've been able to work for most of the day. I'll make up for it today. I'm currently working on implementing the blog. I just wanted to add some things here to put on the blog later on. Fix loading jank (mostly caused by waiting for the css to load in google fonts, which after it's cached it doesn't become a problem, but I want to at least make the initial load clean) [3:04pm] The blog is going to take some time, but I figured out how to set it up. The real problem so far is the mess that this is becoming. I'll really need to take a moment and break this website down when I eventually have to. For now, just finish it. Time Worked: 7.5 hours","title":"April 28"},{"location":"journal/2022/april.html#april-29","text":"[7:13am] I'm still surprised I only worked seven and a half hours yesterday. It felt much longer. I blame the fact that I forget to turn the timer on and still work. But, I finished the blog finally. I'll have to rewrite my first post, as it's something I rambled together quickly to just have up there when I make it live for the first time. A few things to remember for later: Add social media support personal social media (of author >.>) share with others Make all pages responsive Make the blog header a link with a hover style Today I'm just going to be refactoring and reorganizing code. I made a mess creating the website last night, I just want to have it cleaned. Then I'll create the designs for the \"Plans\" and \"About Me\" section, which shouldn't take too long. I'll think of how to reorganize it here because it's a bit of a confusion. So I can split it up into two things to organize: Style, and code. The SASS styling can be split up further into page styles, and then component styles. Page styles will be imported into the main, global sass file. I'll want to break up the page into various components then, and show that through code. Then I'll go through their styles. There are some things that are tricky. The header, for example, highlights depending on what's the current active link or path. If a turn it into a component, I need some way to check. I think I can do it easily enough however by simply making it a prop that tells the link what path is active, and then subsequently adds an active class to the active link. I'll also want to create a better design system. So far, only the colors are really part of the \"system\", and perhaps some components. But I can make it better. One of the things is whether I use a tagging system like .mn--post-card.mn--small or just .mn--post-card-small for the component class. Some research is necessary. I'll look into Sass styling architectures. [7:57am] Whenever I do Sass styling, I don't do any form of nesting. Perhaps I should. [10:11am] Okay, I've cleaned a bit . Not enough, but enough that I can work on the next two pages without feeling messy. After finishing the surface-site (I'm calling it that, I can't figure out a name), I'll go on to create the design system a little more thoroughly. But now, I got to return to the documentation and finishing up my user stories. I'll put this page up using github pages instead of cloudflare's pages. [11:56am] Done, although there wasn't much to do. Next thing I want to do is create the plans and about me section. I'll clean it up a bit more, and then begin work on the design system. Ah, actually I have a bit more to do. I'll want to set up the tasklist for the design system. I thought to make user stories with it, but I think there's a limit to how much I can stretch the concept. I'll instead just create a normal tasklist. [2:14pm] My breaks are becoming too long, a sign that I'm becoming disinterested. Not very good. I have to create a feature page now, and I realized I needed to create content. However, the content I create will have to be in static html. I think I'm going to make it a markdown file that nextjs automatically renders, as I'll likely have to update it and I'm not going to deal with the mess of editing html. I'll create the content first, then integrate it. [8:10pm] I haven't done as much as I wished today. I worked a lot, but a good chunk of it had been spent writing rambly content for my website. I finished the the website, but I rushed the about me and \"vision\" page so it's a bit sloppy, but I'll improve them eventually. I'll want to focus now on getting a start on the design system. I'll decide later whether to come back on them and improve them with my designed system. For now, a lot of typing and creative thinking. Ugh. Time Worked: 9 hours","title":"April 29"},{"location":"journal/2022/april.html#april-30","text":"[9:17am] Woke up a little later today, but that's okay. Today I'm just creating the first iteration of the design system. There are some things that can be improved from the work I did yesterday, mostly under the \"language\" part of it. There's also the concern of accessibility which I find myself having trouble with. The guidelines aren't just \"do this for this\", they use a lot of jargon and technical stuff that makes it more complicated than it needs to be. But that's the nature of standards, usually. I'll just have to go through it. I don't have to care about accessibility on a personal project, but I find importance and obligation in it. If I would help a blind man cross my street, then I would help a blind man navigate my website. And it goes with other disabilities as well. It's just basic human decency, especially if my project is something they find value in. The biggest danger is that I feel it isn't important enough, but I will try regardless. Anyways, I got to work on the dsign system today. I highly doubt I'll finish it today, but I'll want to set up a new repository where I can work on creating all the components without needing to feel tied to it. A concern is typography. Working on a font requires a lot more study, research, and experience than I'm willing to put in this early into the design. I went with IBM's Plex font so far, but I think I'll check out Knuth's Computer Modern just for the nerdyness of it. [10:52am] Okay, I'm sticking with the IBM typography. [11:37am] AAGHGHGHAAHGH. I hate colour schemes. I've been stuck on this for an hour and a half, trying to pick colours. I have a colour scheme already, but it uses cool colours, and I wanted my website to be warm. However, warm colours look ugly. Bah, I'm an academic website, I don't need to be warm. Agh, and I have to create icons and stuff too. Or at least find some. Okay, I can do this, but I need a space I can collect all of my stuff in so I can use later. [11:50am] I got in in way over my head. Is it too late? The thing is, going with a design system can become limiting. But okay, lets split this up into manageable pieces: Should I create a new repository for my design system? No, that is insane. Work within the website itself using sass and components. Do I need to have a css grid system instead of a flex-box system for my design? That's the way design systems seem to lean towards, however it's not that simple. It's more like how padding, margins, sizing and spacing is made consistent. So for example, allowing only options of 16px, 24px, 32px. Apparently, people in Sass make their own grid system. How do I organize my design system? Where do I create it then if I can't make a repository? You organize it in your website through components and sass. Don't create a design system, just create the seeds of one. If I'm working on a very large project, I feel a design system is necessary if I wish to extend it, update it and maintain it easily. It'll allow me to also learn and think of my website in an organized method. fine Use storybook to build your design system components. Use figma for coming up with the actual designs of these components How do i know what components to use? You don't. Your project can turn a many ways. Instead create components that are universally [1:01p] Storybook looks promising. They have a nice article on creating a design system that I want to look at after figuring out how to use storybook. It doesn't address things like spacing, and Sass however. I think I'll just use the Carbon Design System's method, which is to just make the sass seperate from the JSX component exports. Then after that you create a folder that contains all the components in a holistic style. [2:16pm] I set up storybook, now I'm dealing with the problem of figuring out what buttons I need. Okay, so now to create a whole system, I'll need storybook to use a main.scss file, using a sass folder that I have. I'll want to look into proper class creation in sass. For now, lets create a simple button component. [3:27pm] I created it, but I'm unhappy with the way storybook displays css. It says it's a UI constructor, but their Sass support is horrid. Anyways, I made it work. What's the point of being a UI constructor, if it's hard to do basic styling? Bah, anyways. Atleast it autoloads components into a system that I can see and manipulate fairly quickly. I did look into class naming, and I'm going to follow this guy's: https://bradfrost.com/blog/post/css-architecture-for-design-systems/ But my eyes are bleeding now. I've been staring at a screen for 4 hours straight trying to understand this. But now that I have something set up, I can begin work. I have to question how to organize sass. My components each have their own sass file, but I think I'll take everything and put it into a seperate sass folder to use. [4:21pm] My brain was turning to mush so I took a short break. Just a note for the future: Use GraphQL. [9:16pm] I'm calling it in for the day. A few things: I gave up with storybook. The way I wanted to implement my component styles, which was as a global sass stylesheet, was incompatable with it for some reason. I couldn't debug, so I just said \"screw it\" and made a Next.js app with an empty page that displays the components I set in. So far the design is nice. I \"finished\" the buttons. I still have to do the \"disabled\" state of the button, but so far the buttons are usable. I'm working currently on the text input, and that should be enough for me to get started. I questioned whether to even use figma for setting up my components, as it felt like I was set up to just make them in css anyways. At most, I'd figure out the layout, but I feel like I could do that on pen and paper, then just use the component method to implement it. Today was one of those days where I worked a lot, but felt like progress was little. I have a design system started, but it's going to be a lot of work. I'll want to go through the design more efficiently and quickly. I'm going to use a free set of icons to use with my system as well. Tomorrow I might take it a bit more easy. Struggling with storybook really took a lot of my energy away. I want to try and re-write my main website content, and then write a few ideas for interesting media to incorporate with my website. For some reason, I'm thinking of a small green tree, on a white pot. An ocean is out there. Sort of like that. But anyways, I'm going to go sleep now and wake up tomorrow. I want to think a little more about my plan, I'm getting a little lost over what I'm doing and want to stop designing. Now that I have the design method set up, I should be focusing instead on implementing features. Create components and designs based on the log-in form for example. I should try and create the tickets for monalect and start a trello board. But anyways, I'm getting dead tired. I'll see you tomorrow. Time Worked: 8 hours","title":"April 30"},{"location":"journal/2022/may.html","text":"May May 1 [5:23am] I woke up very early through some troubled sleep. I know what it was because of, and it won't happen again. I'll use it as an opportunity, to sleep early again. Now let's do some overhauls on the current text content. For the documentation, I'll need to erase the design documentation and think of it a bit more professionally. In all likelihood, I'll likely have to create the design documentation as its own website, probably as the same folder of the next.js application. I might just put it here as well, and have it become part of this website. We'll see. For now, let's just start over. I'll then work on the website's text content, and make it more marketable, artistic and less manic. I'll want to import the SEO keywords from my other repository. Later on, I'll want to make it a more visually pleasing and creative \"vision\" statement, one that isn't just a markdown document. It will make it intesive, and rather static in that it won't be as easy to change as the markdown document, thus the content change will be a step towards that eventual final design, which will incorporate elements and instruction gained from my design system. For now, it's just a vision. I'll want to edit my blog post as well. The vision statement illustrates Monalect in its philosophical, and its initial constructive form. The blog post will be on about the construction, the timeline, the planned features and what not. After that, I'll want to get back to documentation here. I want to create the necessary tickets for my project. I'm not enjoying designing things based on guess instead of clear need. For example, when I want to design the buttons and the text inputs, I want it done when I choose the login user story to work on. I'll create the functional requirements, create the design, the backend, the frontend, and boom bop bam, I'll have it done. One question I'll have to figure out is Jest. Jest is a pain in the ass because it's confusing. PyTest and Python's unit test library is fine and easy, I can figure that out, but Jest is very opaque to me for some reason. I'll figure it out eventually. But okay, I have the day's work ahead of me, time to work. [8:06am] Done the new design document that detailed my plans and my expectations. I felt it wasn't necessary, but it remove my previous embarassment of a designsystem, and creates just a \"plan\" for it. Now I got to work on the vision statement and blog post. This comes to writing guidelines to be honest, so I think I start creating something like that for my website. [1:46pm] My lack of sleep is coming back to haunt me. I can't focus too well anymore, and I'm becoming annoyed with writing. I thought it'd be a fairly relaxed thing, but it's just making me feel like I'm being unproductive, and writing fluff instead of working on what actually. I'll put it on the back burner for now then, and create the tickets for the project. I'll be working on the user story for user management. The log in and fluff like that. Mail chimp here I come. [8:01pm] I think that's it for today. My tire has put me out for the past few hours, I think I'll just sleep and catch up on my work tomorrow. I sort of finished the first user story. I'll want to edit the ticket to include a bit more detail, tasks and subtasks, then begin on the design, implement the backend, create the components. If I get that far tomorrow, I'll want to learn a bit about the libraries I'm using. I want to go through the documentation a bit more thoroughly. Time Worked: 5 hours May 2 [10:43am] So I caught up on my sleep, although it was very shakey. I slept at 9pm, woke up at 12am, slept at 1am, woke up now at 9am. Hopefully it's enough for my brain to be content today. Today I'll be doing as I said I'll do yesterday. I have something I need to do for my father as well, but that should be trivial. For now: Edit User Ticket to Include More Detail Begin on design Implement Backend Create Frontend Components I also want to change a bit and work on the marketing/writing part. I specifically want to get into metadata, and start thinking more deeply about the design for the blog, but only after this user story is done. The reason why I'm so strict on it is because marketing is a huge part of how this project will be shared and known. My worry is that going for the usual marketing that others do is not the way my target audience is. My target audience go to sci-hub and library genesis. They study things on apps using old UIs. I don't want to alienate them too much. I'll just have to care about that in the design. But anyways, time to work. Time Worked: 6 hours May 3 [8:50am] Didn't work as hard as I would've liked yesterday. It's mostly because I was also sleepy yesterday, and that the design was becoming messy. I wanted to do a lot of things that were nice. Things like a blurred background when the modal sign-up form appeared. Sounds simple enough, right? backdrop-filter: blur(4px); right? Isn't supported on firefox, and I use firefox. So I have to do a hack where I split up the screen into two: the div with the modal, and the div that contains everything else. When the modal is shown, it blurs. And it works so far, I just have to make it now so that when I click outside of the element, it hides the modal. However, I used flexbox to place it, which means the parent element covers everything. It's a quandary. I'm thinking of modifying the z-index of the parent modal, and the modal's content. That should work it out. But yea, I know what I'm working on today. There is something else I'll have to figure out, integrating my design system as a package with my frontend. I'll want to do it after I'm done all the components, and I clean them up a little. But so far, it's taking longer than I thought. I still haven't worked on the backend, and that's the biggest question. Who knows, maybe the backend is actually easy, but I doubt it. Off to work. [11:28am] Finally done the front end. Everything should work beautifully, and my initial solution didn't work, but the second one did and was far easier than I would've thought. It was the type of solution I felt stupid over, involving the change of state from the child component, which I assumed was impossible because you're not supposed to change passed inherited props I thought it would extend there, but alas. All that's left is clean up and integration. Clean up will be tricky as I have no idea where to start on it. I feel like auditing and setting up a standard would be good, but it involves knowing what to audit. Tomorrow I'll want to try and do that. Create an auditing system for my frontend components. For now, I'll work on backend, taking a break from frontend, then I'll work on frontend packaging and integration. [2:29pm] This is great. I have two libraries to figure out quickly. FastAPI and strawberry-graphql. I'll need to figure out GraphQL itself before that as well. What fun, what fun stuff, really. I'll put my notes here. [3:21pm] I've renewed my hate for studying, ugh. I'm reading the GraphQL documentation and it's not fun. I'll want to set a stopping point somewhere, work to that, and then move on to learning fastapi and strawberry-graphql very quickly so I can start implementing it. [3:56pm] I'm going to fastapi-users for this, but I'm only lamenting the fact that I have so much stuff to learn. It's like adding onto a pile. It's very confusing. I'll have it conquered eventually. Also I'm going to stop there. I haven't yet read into the schema tab, and I'll want to do that later, but I really want to figure out the more important things like fastapi, and then revisit my sqlalchemy notes. Time Worked: 8.5 hours May 4 [6:16am] I figured out a bug that had me salty all of last night. It was such a stupid bug. Apparently you have to delete the sqlite3 database for Sqlalchemy to update its schema, but I spent hours reading it trying to figure out if something was wrong with my code. It turns out there wasn't. Anyways, today I got to continue setting it up. Yesterday I decided to give up with fastapi but I'm deciding against it today. It's a useful api for what I'm doing, but also reading and following my code for a few hours has made me understand it a lot better. I need to figure out how to integrate the GraphQL library im using with fastapi-users. I think it'll rely on the dependency structure, but I'll want to play around with it to figure it out. As for yesterday, I worked more than I expected. I'm still not hitting those numbers I want like 10 or 12 hours, but today's a start. Time Worked: 5.5 hours May 5 [9:16am] It turns out sleeping poorly decreases work performance. I restarded everything, I removed fastapi-users and created my own implementation. I just have to finish it today. One thing I'm happy about is how much I've come to learn about python. I feel like I can navigate through python a lot better now using dependencies and decorator functions. The next thing to learn is asynchronous python, and getting more used to Pydantic. I should allot some time to learning instead of working. But anyways, today I got to finish the backend implementation. I'm going for a cookie structure with database. It's stateful but I don't really care for REST adherence. [5:34pm] I'm brain-dead. I've reached the point where I'm becoming lazy with my code. I set up user registration with optional email registration, and all I have to do now is set up validation and exception handling in a clean way. User login and authentication need to be figured out still, but I know how to do it. It's taking me a lot longer than I wished, mostly because I'm getting used to the news stack I decided to go with. So far, I have it in my dead. For now, I'm going to go back to frontend and set things up so I can have my components be locally packaged, and I can use them with my frontend generator. It requires that I set a couple of components first however. So far, that's it. I'm going to take a break now, cool off my head, and then I'll be back soon after to do what I set out to do. Time Worked: 6.5 hours May 6 [8:12am] I stopped work after that last entry. I think backend work is proving to be more brain intensive than I expected. It'll take time to build up an endurance to staring at something that doesn't work for hours. For today, I'll be working on frontend, creating the package, integrating it with the website and setting up the user form in frontend to interact with. I'll then continue onto backend, finishing up captcha, and then organizing things a little more better. I'll want to store my things in seperate files, and make it more airtight. [1:22pm] So I finished with it, but I'm not going to use npm's system. I just created a bash script to copy-paste it into the repository. It will make it skip node_modules. I'm going to go back to backend now, and clean things up a little. I'm going to be honest, I'm a little annoyed by the mess of everything so far. When I work on things, it's becoming half-assed which is not good for quality. I think it's mostly because I'm not creating something I'm seeing, or monalect itself. I was having a lot of fun with frontend and creating the shallow site because I should it off. I have a motivation to improve it more as well. I think I should go back to working on it a bit more, writing down some improvements I can make before I integrate user registration. I realize I can just host my frontend app on cloudflare pages and it'll work out fine. But anyways, I want to go back to working on frontend, so I'm going to re-vamp my shallow website design and its marketing. [7:33pm] I finished my first user story. Technically finished. Everything is done and implemented, but it's very messy and things like exception handling and user feedback aren't done well. Regardless, it works if a user registers the right way, it should work. It means I'm going to have to go back and clean things up tomorrow, preferably everywhere. It'll be a little intensive, so while the programming is still fresh in my mind, I'll write a list. Frontend, fully integrate the design system into the front-end. The frontend shouldn't create any of its own components. Frontend, Move all the registration form states and operations to the registration form component instead of the page file Backend, return reasons why the user couldn't register. Backend, seperate concerns with future growth in mind Design, figure out why selecting the text input doesn't work So that's it for now. I still have some time in the day. I've eaten my last meal and brushed my teeth so I'll be winding down. Regardless, I've only done seven and a half hours worth of work, and I want to up those numbers, so after cooling down, I'll spend the time working on the marketing. I really like the idea of creating textbook maps, with prerequisites. Time Worked: 7.5 hours May 7 [9:27am] I know what's set before me today, but it's taking a while for my meds and coffee to kick in, so I'm going to take it pretty easy at first. I want to go over the shallow site and improve it quite a bit so I can show it off to others. I'll put the list here, then I'll do the list before. I won't be doing the work to improve it, I simply want to set it up to be able to do it later on. I want a clear idea of marketing and improvement. [1:11pm] I went through a bit of the digital marketing course, but still have more to go. I realize I have to split myself up into multiple roles, and so far I'm learning about them. The marketer, the designer, the frontend developer, and the backend developer. The frontend developer is closer to the first three, as a direct implementation of their work, than the backend developer. I assume soon I'll also have to take on the sub-roles within each role as well, which should be just great. I can divide up my time. Because marketing is fairly seperate from the product, and for things related to it, I don't have to spend much time communicating with the product team. I'll save marketing for the morning to brighten up my day. I'm going to be honest, marketing sounds really interesting to me. It's like playing a game, and trying to pump up numbers, much like Monalect will be for studying. I'm going to stop with the course for now, and go through my website a bit more, taking notes on what marketing elements to fit it with, and putting those to completion. [2:52pm] This is very hard. I'm unsure of what to put. So far I have the idea of putting a contents section on the side that jumps to the contents. It'll have to make use of either meta-data or whatever to implement. I think what's so hard about it is I'm too scared to change too much. Let's focus on content then, and come back to that later. I'll want to set up a content creation framework. [3:27pm] I want to set up a weekly schedule now where I retain to certain habits. Things like taking sunday to review the way I learn and work, and setting about improving that. [5:43pm] I'm starting to feel sick. My limbs feel weak, a headache is forming and breathing is becoming weird. I can't really do anything high focus, so I'm just going to focus on content creation. Have something done that I can put up there in my blog. I'm feeling bothered as well for some reason. I've hit that point where I'm beginning to become annoyed with my work. I begin to feel like I have no idea what I'm doing. I thought looking through my front-facing site will give me ideas that I can implement. I dislike the design, it's too minimal, and the gradient is too against the curve. It's because I broke on the figma design system. God, there's too much work to do. I'll just have to re-organize my life today. So first things first, how do I split up my work. I'm using the agile method to work on the app itself, but I'm also doing marketing in order to get users onto it before I publish it. Marketing is going to become important for me getting users and developing a brand or image. But isn't this supposed to be just a side project? If this is how it feels everytime I go back and re-improve my work, it'll quickly become exhausting. But it's okay. If I do it right, I just have to do it once to set up the process. What I mean by that is, by organizing up something like my backend for scaling, then I wouldn't have to think so much about it. Everything should have its place. I'm going to pull out my notebook and work on backend organization after this. But back to marketing. This isn't a side project anymore, that much is clear, but it's not a full-fledged startup either. It's in a limbo between the two, and so I can afford some measure of informality in my blogging. I can use it for creating personality/brand. But I feel a bit hopeless doing those things. I struggle often with social media and trying to put myself out there so people see me, let alone trying to go through an organization to show it off. The better thing would be for me to interspace Monalect with more personal writing and philosophy like I have here, but I'd want to seperate it from my marketing blogs. I'll have to put myself out there as well if I want this whole marketing thing to work-- but that's where it falters. I want something to show before I put myself out there. So what's the play? I'll need to create basic content first off. Then I need to put my website out there with the domain name, which I'll want to do after creating material they could be interested in. So should I take marketing this seriously? I have to answer this question now before I waste so much time on it. If Monalect is going to be a product, then yes, I should take marketing very seriously. Do I think of Monalect as a product? In every way it seems I do. My idea is, I work on it for free at first as a project, and then once I get users and I notice a market for it actually exists, then I'll switch over to startup mode. Register the company, start figuring out ways to monetize, etc. But that's a problem for later. If I want to reach that point, I'll have to have development down. This means more than just implementing things I already know how to do. I can't be content with simple data manipulation. I'll have to get down and dirty with my libaries, and understand my tools thoroughly. I'd honestly use monalect for that. And that's another thing, I originally created Monalect for myself. I'll want to use it. Okay, let's get this mess of a ramble down to a simple thought: I'm still learning. Everything I'm doing here is an iterative process of improvement that will only work if I remain consistent on this project. Which means, I shouldn't stress so much about it. So long as I review and recognize I'm not doing enough, and have the capacity to search for why, then I'm on a path of growth. But it requires constant work, and I guess knowing what to do next. So what to do next. Let me re-read what I wrote, and list my conclusions. create basic content first design, and prepare website for domain publication (using the basic content that I've written to make it less empty) go into marketing, but take it less seriously. it's okay to experiment and be less formal as I explore the field i'm still learning [6:48pm] So I'm just going to organize my stuff then. I need to finish my content creation framework, and set an alloted time to work on it. I'm choosing the morning from 7am-12pm, which is 5 hours. Should be plenty of time. This include any programming work in service to marketting, such as revamping the front-facing site, cleaning up figma, and what not. I'm leaving 12pm-1pm for eating/cooking, and then I'm focusing on 1pm-9pm for programming. That should be 13 hours of work. I'll eat while I program. I need to set up an alarm for it, and a more invested way of making sure I stick to it. I'll be spending the rest of the day preparing for tomorrow. I'll finish the content creatino framework, and set up my marketing tasks for tomorrow. Because it's sunday, I'll only be programming from 1pm-7pm, so I can spend the rest of my time reviewing and planning the week. Time Worked: 5 hours May 8 [8:21am] I'm watching a lot of pre-launch marketing videos. This is a really good one. The idea behind pre-marketing is to get as much users interested in our product as possible, and the measurable factor would be something like signing up onto our email list, or following our social media or blog. The email list being the most valuable because you have the most control over the statistics. So I guess that's where my goal will be around. Getting people to sign up for our email list. It'll mean changing the current registration form for a simple email sign-up form that will replace the \"Coming Soon\", and switching to an invisible recaptcha. For today, I'll still be working on the content creation framework. I'm a little confused still as to how it should work, but at least I have a time frame to work on this. I'll then create a list of concrete ideas to write on. I'll also want to spend some time on the courses again, before finally returning to programming which I'm actually looking forward to, today. [1:31pm] Okay, I went alittle too much into marketing again. I'm unhappy with the progress I'm making there, it's not enough work for the hours I spend on it. I feel like I'm hovering around in limbo wondering what to do instead of actually doing anything. Hopefully that will change soon. As for now, it's time to work on coding finally. I have some things I learned to include. I'm going to finally do the clean up, and then I'll move on to doing two things: Exception handling user registration SEO optimizations on my website I did an audit on my website for things I can improve upon, which was incredibly helpful. I want to do more audits using some online tools. My performance is good, which is good, and I can do more to improve the bottle necks like the SVG. I'll want to set-up analytics as well. I know I said I'd spend marketing programming in marketing's time, but I can't do that if I'm spending most of my time in marketing, writing, editing, and researching. But anyways, lets clean. Frontend, fully integrate the design system into the front-end. The frontend shouldn't create any of its own components. Frontend, Move all the registration form states and operations to the registration form component instead of the page file ~~Backend, return reasons why the user couldn't register.~~ ~~Backend, seperate concerns with future growth in mind~~ Design, figure out why selecting the text input doesn't work [6:51pm] So I did a lot of work. I cleaned up frontend so that it's all integrated with the design system, although it can be improved. I think I did it too much actually. I tried to clean up backend, but found everything rather... already seperated. I did go through the errors, but as I was cleaning up the exception handling, I sort of just questioned the point of it. I was building an api for a frontend that already checked the input. Anyways, I switched focus to setting up email registration for the frontend site. I'm setting that up right now, I finished the email server that I'm going to deploy at home, through cloudflare. Then I'm going to create the form on frontend, which is already there actually, I just need to set up the fetch request. It's super basic, super simple. It gives me time to focus on how I'm going to organize everything, so I'm going to set it up and deploy it. [11:44pm] Okay, I'm almost done. I forgot my raspberry pi password. I'm not looking forward to hosting my things up on google cloud. I took a look at it, annoyed at how buggy rpi-imager was, and realized that I know nothing about what I'm looking at. I'll need to go through it pretty well if I ever hope to host it. It's not as easy as just static site hosting, I actually have to care it turns out. Ugh, I have to reconfigure Apache2 god damn it for mod_wsgi. This is going to be a long night. I'll just do some other things then. I'll have the fresh raspbian install ready-- ugh I just realized I installed the one with the desktop. God damn it. I have to start all over again. Anyways, I'll set it up and install it tomorrow. I need to try and not ruin my sleep. I ran out of antipsychotics, and my psychiatrist in all his wisdom forgot to refill my prescriptions before he took what I assume is his vacation, as his office is closed for the next 2 weeks. So I have a lot of uppers. I have to be careful not to ruin myself, so I won't stop taking my anti-depressants. I really need monalect finished. Tomorrow: Set up self-hosting. After that, I'll go back to marketing and I'll be writing a few more ideas, and then start outlining and researching into one of them. Then I'll implement some SEO stuff for marketing, based on the audit. After that, I'll move on to the next user story, which will be user login w/ sessions. After that, I hope I hope I hope, I can actually get started on the app. Time Worked: 10.5 hours May 9 [1:50pm] I am livid. How hard is it to implement something as stupid as captcha, oh my god. I spent all morning setting it up, I have deployment down, but for some god forsaken reason HCaptcha can't send a token worth its own existence. And if it isn't the token, then it's the stupid email. I hate react, it's the stupidest most incompetent framework created. I give up. Screw captchas, I'll let anyone submit an email I don't care anymore. It's supposed to be so simple, it's stupid that I spent all morning on this. I can't do it anymore, I have to step back. Tomorrow I'll just bite the bullet and set up recaptcha enterprise, I give up. This problem absolutely demotivated me. I'm moving on to what I wanted to do before, which was marketing and some SEO optimizations for my website. The email subscription list will just have to wait. [2:02pm] Oh my god, it turns out google recaptcha still allows you to create recaptcha v2, but it's on their admin console, I want to die. I'm going to take a break then, I'll be back in 15 minutes after cooling off. [3:44pm] Did it and it works, but it's still a little broken. For example, if the textbox is autofilled, then it'll ignore it completely. I'm just going to try and do the old form data stuff and see if that works out. I'll also want to telegraph and design the success/failure a little better. But all in good time. For now, I'm going to get back to marketing. For ideas, I have question as to what I should do. In the beginning, I really just want to write about whatever and start philosophizing, which is not good. I'll want to go with basic easy subjects to make ti easier for myself. Top 5 Self-learning Resources Creating your own course How university has become a debt-trap. I know I said I wouldn't get into the whole anti-schooling thing, but I absolutely love the idea of replacing university with my app. It gives me a really high standard. If I can create a pathway from simple online resources to academia, the long arduous journey, then I've really accomplished something. The first topic has to have a mix of passion and ease. Autodidacticism. Self-learning. The wall for education is broken, and you have no excuse not to study. That's what I really want to do. It can be titled, \"How you can study anything without going to unviersity\" or something like that. I'll get started on outlining and such. [9:06pm] I looked over some of the SEO stuff, and realized I have no will to go back to it right now. I created the outline for my first blogpost and started ranting it out, now I'm working on designs for the coming forms for the app itself. I thought I could skip over user creation and make a demo site for showing it off. Either way I'm winding down. I didn't sleep well last night. I didn't do as much work as I'd hoped due to how long deploying email subscription took, but it's okay. So long as I did it . I might need to create a new branch for my frontend so I can integrate backend into one of them, but I fear what would happen if I mix up the code. I'm just going to make it very modular, I just disconnect it when I deploy it, and name the pages something random. Tomorrow I should follow my schedule pretty strictly though. For the morning, I'll list and integrate the SEO stuff, and then work on my blog post. For the afternoon, I'll want to set up backend and the design for the course object, specifically its CRUD. It means getting down and dirty with graphql again. I wonder how I'd implement a demo user? I thought there should just be a user named \"demo\" that everything is attached to in a simple sqlite database. Registration capabilities won't exist, making them the only user. Any changes made will have to be reverted or just thrown away and mocked on front-end. That means in backend, the demo user has two modes: production and development. In development, you can do CRUD to test out those CRUD functions during integration testing, but in production, they're just thrown out and faked. Of course, this is for the demo, before any user login and authorization takes place. That will be its own confusion. But I'm typing myself out, I'll be back tomorrow morning. Till then! Time Worked: 8 hours May 10 [6:42am] Time is moving too fast. It's already May 10th, I'm surprised. Today I'm going to be working on what I said I'd do yesterday. It'll be pretty uneventful. I'll try to complete everything as fast as I can so I can sit down and get started thinking about the app itself. I want to read other people's React code and see how more I can improve it. So far it seems to be in line with what I'm doing. I'm using far more states than I know to. I have a few problems as well, such as getting value. [7:38am] I'll have to sort the items on the audit. (List Pasted to May 11) [9:16am] I'm going to move on to writing my blog post. SEO is fun, but I'm hesitant on sharing my website until I can have good content up there. Sharing to my close and personals, that is. I want to switch focus over onto from a learning management system, to a textbook study tool. Or no... that makes it less than it is. Course manager? I think that's the closest to it. A course manager. Create, manage, and study your courses. With it, you can read and write notes, test yourself, etc. It's not neccesarily a self-learning management system, it's a course manager. That's perfect. But I can't then go into autodidacticism and anti-schooling. Maybe I still can? I don't want to hurt my product by giving it a lot of political or ideological baggage. I'll still go through my original blog post with fervor though, and then I'll care about that. I might spend a few more hours actually on re-aligning the content to that new framing. [3:18pm] Finished writing the rough draft. Writing articles is going to be an increasingly bigger problem. The act of writing can get uncomfortable, and unlike programming where I'm solving a problem, it's much easier to move on and procrastinate. So when writing, I want to create a different environment. I might just write it by hand. But anyways, time to focus on programming now. What did I say I'd do? Ah, yes. The course object. Course creation and modification, and then some design work for the UI. I'll actually work on that then, and at night I want to finish the SEO checklist. Then I'll need to allot some time to cleaning my code again. I'll want to create a checklist for that, and I'll want to do it by the end of the week. As I program, I'll onto it in the procrastination file. [5:57pm] I'm realizing that I have to do a bit more planning on the user story. I started off with course creation, but course creation itself has to come from an environment. I'll finish implementing the stuff for now. [7:43pm] I don't think I can work anymore. I have a problem with my psychiatry medication. My psychiatrist didn't refill my antipsychotic, and I've been off it for 2 or 3 days, and now I'm going through withdrawal. It's so far just an experience of intense depression. I'm falling into the habit of being on my phone too long, or scrolling through reddit trying to find stimulation. The problem is, I don't think I want to take my antipsychotic anymore. It's caused me tardive dyskinesia, which has a chance in becoming permanent, so I'm stopping it. I don't know why, but every antipsychotic I take, I somehow get bad side effects. With abilify it was weight gain, and now with Latuda it's involuntary tics. It's making me tired of psychiatry. I have two anti-depressants, one leftover, and a new one. I'm hoping that they will carry me through, but we'll see. It has a chance to severely impact my thinking, as such I'm going to have to go into \"lockdown\" on my life. I'm going to block websites, ban my phone. I'll need to go outside again, exercise, and be diligent with sleep. Life is going to be very hard again. It's a great annoyance. Why god gave me this illness, I don't know. There's no way to describe the horror of not being in control of your own mind. I can see myself deteriorating, split between the eyes of sanity and insanity. [9:04pm] I feel marginally better. I'm going to keep working again. Time Worked: 6 hours May 11 [4:18am] Ugghughgghhgh. I slept at 10:30pm, woke up at 3:30am. I'm unable to sleep again. I figure I'll use the time to work, but this isn't good. Sleep is usually the greatest factor in my mental wellbeing. If I struggle with it, it's not a good sign. The good news is that I tried going from 0.5mg to 1mg of melatonin, and it worked really well. Much better than just 0.5mg, and it really hit 30-60 minutes after I took it. It has a good chance of replacing Latuda's helpful side effect of causing me to sleep. I think I can do this. [11:32am] Didn't do much, just three hours work focusing on my blog post. There was a power outage for a second early morning, but it went by. Now I'm going back to focusing on programming, but I want to talk a bit about my blog post. I became interested in writing it, but made it more of a mess. I turned it from 1600 words into 2600 words by pure ranting, and organized it up a bit. I want to print it out and do some hand-editing, but I think I want to find a way to edit on the computer. I might actually nap a little first, or rest my eyes. Anyways, after that, I really want to finish the frontend work that I told myself I'd do. I want to show it off to my parents, but I need to work into marketing a bit more, and put out my reworked vision statement. For now, I'll finish the course stuff I said I'd do yesterday, and then create a list for the dashboard and general structure around course creation before going into course creation itself. I'll start with the design first of that part. I have it in my head. A pull-out menu to the side that shows your courses, while the navigation header takes you to your notebook, textbook, etc. I still want to decide on how I want to show it. I thought originally to merge the text reader and notebook into a single page for \"study\", but I want to be able to middle-click the link have the text reader open in a new tab if I wanted to split windows instead of split-view inside the app itself. This allows me to use multiple monitors. [2:05pm] Took a little nap. Just sat my head back in bed. There's something strange about sleeping on my back, where I just nod in and out of sleep. It's the closest I'll ever get to feeling high. But anyways I have work to do. I finished the course object creation, and updateing. Now I just got to do deleting, and reading, but it's turning out to be very easy. I worry though it's just putting more work on frontend. In backend, it's easy to respond with the initial query for everything on a page. But creating a giant graphql query in frontend just to send it it, is not going to be very fun. meta description tag landing blog vision about responsiveness landing blog vision about increase page text content use main keywords across important html tags landing blog vision about add favicon title tag landing blog vision about increase keyword distribution set up analytics google search console google analytics Here's stuff I should do, but don't need to do right now link twitter link linkedin analytics tracking tool schema markup twitter cards link youtube channel use multiple different types of headers robots.txt [4:30pm] All done. It's so cool, I really want to show it off to friends and family. There's going to be a lot of optimization, design, and clean up work to do eventually, but I'm really proud of my work so far. I'll really only focus on marketing. I can't wait until I get enough content that I can improve the site again. For the next few days, it's just the app and marketing. So a lot of grunt work. I don't want to get into the dashboard right now. I want to actually focus on the content a bit before going into it. Time Worked: 6 hours May 12 [9:02am] Ugh, it's almost May 14. I don't know why I keep dreading that date. It's when I have to get a cavity filled, which shouldn't be so stressful. It's just a cavity filling. I think it's the money worries. I woke up early today at around 6am, sleeping a bit better. It just took some time because I had some friendship drama. But now I only have work before me. Morning: Marketing. Work on the blog post, and then the vision statement. After that, we have the design work. There are some things I have to clean up. Namely, set things up in Figma to become a proper design system with components I can use to begin designing the app. I then design the dashboard. The dashboard will go from the structure to the course creation itself. Anything involving file uploads will be ignored, so for example the questions jsons and and the textbook file uploads. I'll create the components, then move on to front-end or back-end, depending on what I'm feeling. After that, integration. Lets go. [1:12pm] I feel so tired, and demotivated. Worse than yesterday. I don't know if it's the sleep or the withdrawal, it's getting scary. I'm going to remove a lot of things now. I'm finding myself scrolling too much. I'm going to nap as well. I'll be back. [3:46pm] I took a nap, again, and feel a bit more motivated. I really do think it's just lack of sleep now. I close my eyes for thirty minutes, and I wake up feeling normal again. It's going to mean I have to be very diligent with my sleep. I don't want to ruin it. Anyways, I spent an hour on the dashboard now, and the design is coming to me through frustration. I might want to do some paper layouts, and then moving on to implementing it in figma. The color scheme is annoying as well. Of course, I'm making it very simple since it's just the initial dashboard, but I still have to make it look nice. In the future, I'm going to implement tabs for when I eventually implement a curricula or subject structure, to organize these subjects in. I'm looking at other examples. Courses on EdX and Coursera. I'm also looking at Quizlet's cards. The issue with their setup is that they're vendors showing off many complicated different things. Quizlet isn't, but their cards are very small. I want my courses to feel very big, and static so that when the user doesn't feel comfortable modifying their courses. [9:06pm] I didn't work well today. I'm very annoyed about it. I'm going to have to change things, this isn't good. But it's time for me to try and sleep. I don't want to ruin it. I'll be back tomorrow to work and make up all this lost time, mark my words. Time Worked: 4.5 hours May 13 [2:40pm] Not a good start. I mostly spent time watching old Johnny Carson interviews. But I did sleep fairly well. I'm going to get a start today on course creation. A question I'm having is with regards to the switch from course overview to course creation. I can use a modal popup, or I can use a different web page. I'll go with a modal. [5:00pm] I'm incredibly frustrated with the design. I'm not using Figma as good as I should. I'm cutting corners, doing things lazily. God damn it. I want to break everything down again. It's not good enough. But I'm going to push through it. So long as I build it and work. I'll revisit the design later, I just want to use this damn app. Time Worked: 3 hours May 14 [9:15am] I feel much better now. It really was sleep. It turns out sleeping 4 or 5 disjointed hours every day for a few days can really ruin your motivation, who would've thought. I'm sleeping much better now as the withdrawal wears off. One worry is the fact that I'm having more and more trouble trying to fall asleep, likely due to the wellbutrin, which I ran out of today and need to get a refill on somehow. I'll see. I still have the Lexapro to survive off of, which will definitely rein true hell upon my sleep. So I'm going to try and see my family doctor and get a refill on it, maybe without taking it for a day or two. But for now, I can do things. I'm frustrated with the design still, it feels incredibly amateurish again, which is not what I felt before. I want to go back and rehaul everything before I move on to creating my app. My primary issue is with the color scheme, and the general \"feel\" of it. While I enjoy the lightness, and it's pretty formal, it's not \"correct\". For one, I'm unhappy with using a gradient for the background, which I did to add variety to my background, so it isn't just blank. However, it's making it very hard to play around with my color scheme. I would honestly choose black and white shades if I could just for ease of use, but I need color psychology in my design. One thing I'd like to add is to my email database which is a test@gmail.com account that allows you to just test if it works, and then throw it out. But yea, I'm going to ignore marketing for this morning, as I have a dentist appoint at 10:30am, which I'm leaving for at 10am. But for today, it's just entirely design. I have to put myself in the design headspace again. Moodboards, aesthetic, peace. I've been listening to generative synthesis mixes, which is a really clean headspace. I'm unsure if it's for education however. In Islam, there's a taboo against showing images of faces and creatures in art. The idea, aside from idolatry which is the more severe reason, is that you're trying to mimic god. It's very Platonic now that I think about it, but it gives a lot of things in islam a very \"inhuman\", or \"background\" sort of feel. Like what you're using, whether it's a building, or a prayer mat, or a book, is just an object to use. Unless they're meditated upon, it's rather boring. They can be beautiful, but you can't go \"oh, that's a person doing something\", there's no story to recognize. It makes it very unidimensional on the surface, but the beauty in islamic art is just how well they make the most of those restrictions. They rely heavily on complexity, composition, size, form, color, and light to drive emotion. It's hidden complexity as an art. I really want to be inspired by that, because that's what my web design aims are. The website I make is supposed to serve a function, it's not supposed to be something the user sees but \"feels\" as they navigate through the user experience. Whether that's instructing or informing the user, or providing the user your web service. Imagery can distract from that, but visuals can help, for example in instruction, but those visuals are often very clearly there for the user to see and are fairly active active. Another thing is I see a lot of graphics design on Dribbble as overly trendy. Everyone is copying each other, you rarely find an interesting and unique take on things unless you actively google it and see examples in those top ten lists. [9:47am] Now looking over my own website design, I'm going to criticize it and see what I can do to change it. I spoke on the color scheme before, but the color scheme itself doesn't really bother me. I rather enjoy the blue color scheme, but I don't enjoy the gradient, as I've already said. One thing I enjoy is the use of color in the different pages, which is done by using different gradients with one constant color, and another differing color. The blog page feels different than the landing page. What I don't enjoy is how minimal it is. It's minimal because of the lack of content, caused by the lack of character-building on my part. There's nothing much I can do about that. Grounding Myself to Reality: But anyways, after some quick thought, I want to say that I'm not going to overhaul the changes now. I think the reason why I'm frustrated is because I'm thinking the design now is not \"usable\", which is rather understandable. I'm just making the thing. But I do want to revisit the design. A lot of the frustration comes from an insecurity in how people will perceive it, which I personally think is fine, it pushes me to make it a lot better rather than be content with poor quality, or mediocrity. It just shouldn't stand in the way of actually building it, and ignoring the idea that I can eventually improve it anyways. So I'm going to make sure things are set up so that they can be built properly. [11:27am] Okay my mouth is numb, and my mind is fresh. I want to work on course CRUD still, just to have it done. But the work is surprisingly quick, save for the annoyance with design.","title":"May"},{"location":"journal/2022/may.html#may","text":"","title":"May"},{"location":"journal/2022/may.html#may-1","text":"[5:23am] I woke up very early through some troubled sleep. I know what it was because of, and it won't happen again. I'll use it as an opportunity, to sleep early again. Now let's do some overhauls on the current text content. For the documentation, I'll need to erase the design documentation and think of it a bit more professionally. In all likelihood, I'll likely have to create the design documentation as its own website, probably as the same folder of the next.js application. I might just put it here as well, and have it become part of this website. We'll see. For now, let's just start over. I'll then work on the website's text content, and make it more marketable, artistic and less manic. I'll want to import the SEO keywords from my other repository. Later on, I'll want to make it a more visually pleasing and creative \"vision\" statement, one that isn't just a markdown document. It will make it intesive, and rather static in that it won't be as easy to change as the markdown document, thus the content change will be a step towards that eventual final design, which will incorporate elements and instruction gained from my design system. For now, it's just a vision. I'll want to edit my blog post as well. The vision statement illustrates Monalect in its philosophical, and its initial constructive form. The blog post will be on about the construction, the timeline, the planned features and what not. After that, I'll want to get back to documentation here. I want to create the necessary tickets for my project. I'm not enjoying designing things based on guess instead of clear need. For example, when I want to design the buttons and the text inputs, I want it done when I choose the login user story to work on. I'll create the functional requirements, create the design, the backend, the frontend, and boom bop bam, I'll have it done. One question I'll have to figure out is Jest. Jest is a pain in the ass because it's confusing. PyTest and Python's unit test library is fine and easy, I can figure that out, but Jest is very opaque to me for some reason. I'll figure it out eventually. But okay, I have the day's work ahead of me, time to work. [8:06am] Done the new design document that detailed my plans and my expectations. I felt it wasn't necessary, but it remove my previous embarassment of a designsystem, and creates just a \"plan\" for it. Now I got to work on the vision statement and blog post. This comes to writing guidelines to be honest, so I think I start creating something like that for my website. [1:46pm] My lack of sleep is coming back to haunt me. I can't focus too well anymore, and I'm becoming annoyed with writing. I thought it'd be a fairly relaxed thing, but it's just making me feel like I'm being unproductive, and writing fluff instead of working on what actually. I'll put it on the back burner for now then, and create the tickets for the project. I'll be working on the user story for user management. The log in and fluff like that. Mail chimp here I come. [8:01pm] I think that's it for today. My tire has put me out for the past few hours, I think I'll just sleep and catch up on my work tomorrow. I sort of finished the first user story. I'll want to edit the ticket to include a bit more detail, tasks and subtasks, then begin on the design, implement the backend, create the components. If I get that far tomorrow, I'll want to learn a bit about the libraries I'm using. I want to go through the documentation a bit more thoroughly. Time Worked: 5 hours","title":"May 1"},{"location":"journal/2022/may.html#may-2","text":"[10:43am] So I caught up on my sleep, although it was very shakey. I slept at 9pm, woke up at 12am, slept at 1am, woke up now at 9am. Hopefully it's enough for my brain to be content today. Today I'll be doing as I said I'll do yesterday. I have something I need to do for my father as well, but that should be trivial. For now: Edit User Ticket to Include More Detail Begin on design Implement Backend Create Frontend Components I also want to change a bit and work on the marketing/writing part. I specifically want to get into metadata, and start thinking more deeply about the design for the blog, but only after this user story is done. The reason why I'm so strict on it is because marketing is a huge part of how this project will be shared and known. My worry is that going for the usual marketing that others do is not the way my target audience is. My target audience go to sci-hub and library genesis. They study things on apps using old UIs. I don't want to alienate them too much. I'll just have to care about that in the design. But anyways, time to work. Time Worked: 6 hours","title":"May 2"},{"location":"journal/2022/may.html#may-3","text":"[8:50am] Didn't work as hard as I would've liked yesterday. It's mostly because I was also sleepy yesterday, and that the design was becoming messy. I wanted to do a lot of things that were nice. Things like a blurred background when the modal sign-up form appeared. Sounds simple enough, right? backdrop-filter: blur(4px); right? Isn't supported on firefox, and I use firefox. So I have to do a hack where I split up the screen into two: the div with the modal, and the div that contains everything else. When the modal is shown, it blurs. And it works so far, I just have to make it now so that when I click outside of the element, it hides the modal. However, I used flexbox to place it, which means the parent element covers everything. It's a quandary. I'm thinking of modifying the z-index of the parent modal, and the modal's content. That should work it out. But yea, I know what I'm working on today. There is something else I'll have to figure out, integrating my design system as a package with my frontend. I'll want to do it after I'm done all the components, and I clean them up a little. But so far, it's taking longer than I thought. I still haven't worked on the backend, and that's the biggest question. Who knows, maybe the backend is actually easy, but I doubt it. Off to work. [11:28am] Finally done the front end. Everything should work beautifully, and my initial solution didn't work, but the second one did and was far easier than I would've thought. It was the type of solution I felt stupid over, involving the change of state from the child component, which I assumed was impossible because you're not supposed to change passed inherited props I thought it would extend there, but alas. All that's left is clean up and integration. Clean up will be tricky as I have no idea where to start on it. I feel like auditing and setting up a standard would be good, but it involves knowing what to audit. Tomorrow I'll want to try and do that. Create an auditing system for my frontend components. For now, I'll work on backend, taking a break from frontend, then I'll work on frontend packaging and integration. [2:29pm] This is great. I have two libraries to figure out quickly. FastAPI and strawberry-graphql. I'll need to figure out GraphQL itself before that as well. What fun, what fun stuff, really. I'll put my notes here. [3:21pm] I've renewed my hate for studying, ugh. I'm reading the GraphQL documentation and it's not fun. I'll want to set a stopping point somewhere, work to that, and then move on to learning fastapi and strawberry-graphql very quickly so I can start implementing it. [3:56pm] I'm going to fastapi-users for this, but I'm only lamenting the fact that I have so much stuff to learn. It's like adding onto a pile. It's very confusing. I'll have it conquered eventually. Also I'm going to stop there. I haven't yet read into the schema tab, and I'll want to do that later, but I really want to figure out the more important things like fastapi, and then revisit my sqlalchemy notes. Time Worked: 8.5 hours","title":"May 3"},{"location":"journal/2022/may.html#may-4","text":"[6:16am] I figured out a bug that had me salty all of last night. It was such a stupid bug. Apparently you have to delete the sqlite3 database for Sqlalchemy to update its schema, but I spent hours reading it trying to figure out if something was wrong with my code. It turns out there wasn't. Anyways, today I got to continue setting it up. Yesterday I decided to give up with fastapi but I'm deciding against it today. It's a useful api for what I'm doing, but also reading and following my code for a few hours has made me understand it a lot better. I need to figure out how to integrate the GraphQL library im using with fastapi-users. I think it'll rely on the dependency structure, but I'll want to play around with it to figure it out. As for yesterday, I worked more than I expected. I'm still not hitting those numbers I want like 10 or 12 hours, but today's a start. Time Worked: 5.5 hours","title":"May 4"},{"location":"journal/2022/may.html#may-5","text":"[9:16am] It turns out sleeping poorly decreases work performance. I restarded everything, I removed fastapi-users and created my own implementation. I just have to finish it today. One thing I'm happy about is how much I've come to learn about python. I feel like I can navigate through python a lot better now using dependencies and decorator functions. The next thing to learn is asynchronous python, and getting more used to Pydantic. I should allot some time to learning instead of working. But anyways, today I got to finish the backend implementation. I'm going for a cookie structure with database. It's stateful but I don't really care for REST adherence. [5:34pm] I'm brain-dead. I've reached the point where I'm becoming lazy with my code. I set up user registration with optional email registration, and all I have to do now is set up validation and exception handling in a clean way. User login and authentication need to be figured out still, but I know how to do it. It's taking me a lot longer than I wished, mostly because I'm getting used to the news stack I decided to go with. So far, I have it in my dead. For now, I'm going to go back to frontend and set things up so I can have my components be locally packaged, and I can use them with my frontend generator. It requires that I set a couple of components first however. So far, that's it. I'm going to take a break now, cool off my head, and then I'll be back soon after to do what I set out to do. Time Worked: 6.5 hours","title":"May 5"},{"location":"journal/2022/may.html#may-6","text":"[8:12am] I stopped work after that last entry. I think backend work is proving to be more brain intensive than I expected. It'll take time to build up an endurance to staring at something that doesn't work for hours. For today, I'll be working on frontend, creating the package, integrating it with the website and setting up the user form in frontend to interact with. I'll then continue onto backend, finishing up captcha, and then organizing things a little more better. I'll want to store my things in seperate files, and make it more airtight. [1:22pm] So I finished with it, but I'm not going to use npm's system. I just created a bash script to copy-paste it into the repository. It will make it skip node_modules. I'm going to go back to backend now, and clean things up a little. I'm going to be honest, I'm a little annoyed by the mess of everything so far. When I work on things, it's becoming half-assed which is not good for quality. I think it's mostly because I'm not creating something I'm seeing, or monalect itself. I was having a lot of fun with frontend and creating the shallow site because I should it off. I have a motivation to improve it more as well. I think I should go back to working on it a bit more, writing down some improvements I can make before I integrate user registration. I realize I can just host my frontend app on cloudflare pages and it'll work out fine. But anyways, I want to go back to working on frontend, so I'm going to re-vamp my shallow website design and its marketing. [7:33pm] I finished my first user story. Technically finished. Everything is done and implemented, but it's very messy and things like exception handling and user feedback aren't done well. Regardless, it works if a user registers the right way, it should work. It means I'm going to have to go back and clean things up tomorrow, preferably everywhere. It'll be a little intensive, so while the programming is still fresh in my mind, I'll write a list. Frontend, fully integrate the design system into the front-end. The frontend shouldn't create any of its own components. Frontend, Move all the registration form states and operations to the registration form component instead of the page file Backend, return reasons why the user couldn't register. Backend, seperate concerns with future growth in mind Design, figure out why selecting the text input doesn't work So that's it for now. I still have some time in the day. I've eaten my last meal and brushed my teeth so I'll be winding down. Regardless, I've only done seven and a half hours worth of work, and I want to up those numbers, so after cooling down, I'll spend the time working on the marketing. I really like the idea of creating textbook maps, with prerequisites. Time Worked: 7.5 hours","title":"May 6"},{"location":"journal/2022/may.html#may-7","text":"[9:27am] I know what's set before me today, but it's taking a while for my meds and coffee to kick in, so I'm going to take it pretty easy at first. I want to go over the shallow site and improve it quite a bit so I can show it off to others. I'll put the list here, then I'll do the list before. I won't be doing the work to improve it, I simply want to set it up to be able to do it later on. I want a clear idea of marketing and improvement. [1:11pm] I went through a bit of the digital marketing course, but still have more to go. I realize I have to split myself up into multiple roles, and so far I'm learning about them. The marketer, the designer, the frontend developer, and the backend developer. The frontend developer is closer to the first three, as a direct implementation of their work, than the backend developer. I assume soon I'll also have to take on the sub-roles within each role as well, which should be just great. I can divide up my time. Because marketing is fairly seperate from the product, and for things related to it, I don't have to spend much time communicating with the product team. I'll save marketing for the morning to brighten up my day. I'm going to be honest, marketing sounds really interesting to me. It's like playing a game, and trying to pump up numbers, much like Monalect will be for studying. I'm going to stop with the course for now, and go through my website a bit more, taking notes on what marketing elements to fit it with, and putting those to completion. [2:52pm] This is very hard. I'm unsure of what to put. So far I have the idea of putting a contents section on the side that jumps to the contents. It'll have to make use of either meta-data or whatever to implement. I think what's so hard about it is I'm too scared to change too much. Let's focus on content then, and come back to that later. I'll want to set up a content creation framework. [3:27pm] I want to set up a weekly schedule now where I retain to certain habits. Things like taking sunday to review the way I learn and work, and setting about improving that. [5:43pm] I'm starting to feel sick. My limbs feel weak, a headache is forming and breathing is becoming weird. I can't really do anything high focus, so I'm just going to focus on content creation. Have something done that I can put up there in my blog. I'm feeling bothered as well for some reason. I've hit that point where I'm beginning to become annoyed with my work. I begin to feel like I have no idea what I'm doing. I thought looking through my front-facing site will give me ideas that I can implement. I dislike the design, it's too minimal, and the gradient is too against the curve. It's because I broke on the figma design system. God, there's too much work to do. I'll just have to re-organize my life today. So first things first, how do I split up my work. I'm using the agile method to work on the app itself, but I'm also doing marketing in order to get users onto it before I publish it. Marketing is going to become important for me getting users and developing a brand or image. But isn't this supposed to be just a side project? If this is how it feels everytime I go back and re-improve my work, it'll quickly become exhausting. But it's okay. If I do it right, I just have to do it once to set up the process. What I mean by that is, by organizing up something like my backend for scaling, then I wouldn't have to think so much about it. Everything should have its place. I'm going to pull out my notebook and work on backend organization after this. But back to marketing. This isn't a side project anymore, that much is clear, but it's not a full-fledged startup either. It's in a limbo between the two, and so I can afford some measure of informality in my blogging. I can use it for creating personality/brand. But I feel a bit hopeless doing those things. I struggle often with social media and trying to put myself out there so people see me, let alone trying to go through an organization to show it off. The better thing would be for me to interspace Monalect with more personal writing and philosophy like I have here, but I'd want to seperate it from my marketing blogs. I'll have to put myself out there as well if I want this whole marketing thing to work-- but that's where it falters. I want something to show before I put myself out there. So what's the play? I'll need to create basic content first off. Then I need to put my website out there with the domain name, which I'll want to do after creating material they could be interested in. So should I take marketing this seriously? I have to answer this question now before I waste so much time on it. If Monalect is going to be a product, then yes, I should take marketing very seriously. Do I think of Monalect as a product? In every way it seems I do. My idea is, I work on it for free at first as a project, and then once I get users and I notice a market for it actually exists, then I'll switch over to startup mode. Register the company, start figuring out ways to monetize, etc. But that's a problem for later. If I want to reach that point, I'll have to have development down. This means more than just implementing things I already know how to do. I can't be content with simple data manipulation. I'll have to get down and dirty with my libaries, and understand my tools thoroughly. I'd honestly use monalect for that. And that's another thing, I originally created Monalect for myself. I'll want to use it. Okay, let's get this mess of a ramble down to a simple thought: I'm still learning. Everything I'm doing here is an iterative process of improvement that will only work if I remain consistent on this project. Which means, I shouldn't stress so much about it. So long as I review and recognize I'm not doing enough, and have the capacity to search for why, then I'm on a path of growth. But it requires constant work, and I guess knowing what to do next. So what to do next. Let me re-read what I wrote, and list my conclusions. create basic content first design, and prepare website for domain publication (using the basic content that I've written to make it less empty) go into marketing, but take it less seriously. it's okay to experiment and be less formal as I explore the field i'm still learning [6:48pm] So I'm just going to organize my stuff then. I need to finish my content creation framework, and set an alloted time to work on it. I'm choosing the morning from 7am-12pm, which is 5 hours. Should be plenty of time. This include any programming work in service to marketting, such as revamping the front-facing site, cleaning up figma, and what not. I'm leaving 12pm-1pm for eating/cooking, and then I'm focusing on 1pm-9pm for programming. That should be 13 hours of work. I'll eat while I program. I need to set up an alarm for it, and a more invested way of making sure I stick to it. I'll be spending the rest of the day preparing for tomorrow. I'll finish the content creatino framework, and set up my marketing tasks for tomorrow. Because it's sunday, I'll only be programming from 1pm-7pm, so I can spend the rest of my time reviewing and planning the week. Time Worked: 5 hours","title":"May 7"},{"location":"journal/2022/may.html#may-8","text":"[8:21am] I'm watching a lot of pre-launch marketing videos. This is a really good one. The idea behind pre-marketing is to get as much users interested in our product as possible, and the measurable factor would be something like signing up onto our email list, or following our social media or blog. The email list being the most valuable because you have the most control over the statistics. So I guess that's where my goal will be around. Getting people to sign up for our email list. It'll mean changing the current registration form for a simple email sign-up form that will replace the \"Coming Soon\", and switching to an invisible recaptcha. For today, I'll still be working on the content creation framework. I'm a little confused still as to how it should work, but at least I have a time frame to work on this. I'll then create a list of concrete ideas to write on. I'll also want to spend some time on the courses again, before finally returning to programming which I'm actually looking forward to, today. [1:31pm] Okay, I went alittle too much into marketing again. I'm unhappy with the progress I'm making there, it's not enough work for the hours I spend on it. I feel like I'm hovering around in limbo wondering what to do instead of actually doing anything. Hopefully that will change soon. As for now, it's time to work on coding finally. I have some things I learned to include. I'm going to finally do the clean up, and then I'll move on to doing two things: Exception handling user registration SEO optimizations on my website I did an audit on my website for things I can improve upon, which was incredibly helpful. I want to do more audits using some online tools. My performance is good, which is good, and I can do more to improve the bottle necks like the SVG. I'll want to set-up analytics as well. I know I said I'd spend marketing programming in marketing's time, but I can't do that if I'm spending most of my time in marketing, writing, editing, and researching. But anyways, lets clean. Frontend, fully integrate the design system into the front-end. The frontend shouldn't create any of its own components. Frontend, Move all the registration form states and operations to the registration form component instead of the page file ~~Backend, return reasons why the user couldn't register.~~ ~~Backend, seperate concerns with future growth in mind~~ Design, figure out why selecting the text input doesn't work [6:51pm] So I did a lot of work. I cleaned up frontend so that it's all integrated with the design system, although it can be improved. I think I did it too much actually. I tried to clean up backend, but found everything rather... already seperated. I did go through the errors, but as I was cleaning up the exception handling, I sort of just questioned the point of it. I was building an api for a frontend that already checked the input. Anyways, I switched focus to setting up email registration for the frontend site. I'm setting that up right now, I finished the email server that I'm going to deploy at home, through cloudflare. Then I'm going to create the form on frontend, which is already there actually, I just need to set up the fetch request. It's super basic, super simple. It gives me time to focus on how I'm going to organize everything, so I'm going to set it up and deploy it. [11:44pm] Okay, I'm almost done. I forgot my raspberry pi password. I'm not looking forward to hosting my things up on google cloud. I took a look at it, annoyed at how buggy rpi-imager was, and realized that I know nothing about what I'm looking at. I'll need to go through it pretty well if I ever hope to host it. It's not as easy as just static site hosting, I actually have to care it turns out. Ugh, I have to reconfigure Apache2 god damn it for mod_wsgi. This is going to be a long night. I'll just do some other things then. I'll have the fresh raspbian install ready-- ugh I just realized I installed the one with the desktop. God damn it. I have to start all over again. Anyways, I'll set it up and install it tomorrow. I need to try and not ruin my sleep. I ran out of antipsychotics, and my psychiatrist in all his wisdom forgot to refill my prescriptions before he took what I assume is his vacation, as his office is closed for the next 2 weeks. So I have a lot of uppers. I have to be careful not to ruin myself, so I won't stop taking my anti-depressants. I really need monalect finished. Tomorrow: Set up self-hosting. After that, I'll go back to marketing and I'll be writing a few more ideas, and then start outlining and researching into one of them. Then I'll implement some SEO stuff for marketing, based on the audit. After that, I'll move on to the next user story, which will be user login w/ sessions. After that, I hope I hope I hope, I can actually get started on the app. Time Worked: 10.5 hours","title":"May 8"},{"location":"journal/2022/may.html#may-9","text":"[1:50pm] I am livid. How hard is it to implement something as stupid as captcha, oh my god. I spent all morning setting it up, I have deployment down, but for some god forsaken reason HCaptcha can't send a token worth its own existence. And if it isn't the token, then it's the stupid email. I hate react, it's the stupidest most incompetent framework created. I give up. Screw captchas, I'll let anyone submit an email I don't care anymore. It's supposed to be so simple, it's stupid that I spent all morning on this. I can't do it anymore, I have to step back. Tomorrow I'll just bite the bullet and set up recaptcha enterprise, I give up. This problem absolutely demotivated me. I'm moving on to what I wanted to do before, which was marketing and some SEO optimizations for my website. The email subscription list will just have to wait. [2:02pm] Oh my god, it turns out google recaptcha still allows you to create recaptcha v2, but it's on their admin console, I want to die. I'm going to take a break then, I'll be back in 15 minutes after cooling off. [3:44pm] Did it and it works, but it's still a little broken. For example, if the textbox is autofilled, then it'll ignore it completely. I'm just going to try and do the old form data stuff and see if that works out. I'll also want to telegraph and design the success/failure a little better. But all in good time. For now, I'm going to get back to marketing. For ideas, I have question as to what I should do. In the beginning, I really just want to write about whatever and start philosophizing, which is not good. I'll want to go with basic easy subjects to make ti easier for myself. Top 5 Self-learning Resources Creating your own course How university has become a debt-trap. I know I said I wouldn't get into the whole anti-schooling thing, but I absolutely love the idea of replacing university with my app. It gives me a really high standard. If I can create a pathway from simple online resources to academia, the long arduous journey, then I've really accomplished something. The first topic has to have a mix of passion and ease. Autodidacticism. Self-learning. The wall for education is broken, and you have no excuse not to study. That's what I really want to do. It can be titled, \"How you can study anything without going to unviersity\" or something like that. I'll get started on outlining and such. [9:06pm] I looked over some of the SEO stuff, and realized I have no will to go back to it right now. I created the outline for my first blogpost and started ranting it out, now I'm working on designs for the coming forms for the app itself. I thought I could skip over user creation and make a demo site for showing it off. Either way I'm winding down. I didn't sleep well last night. I didn't do as much work as I'd hoped due to how long deploying email subscription took, but it's okay. So long as I did it . I might need to create a new branch for my frontend so I can integrate backend into one of them, but I fear what would happen if I mix up the code. I'm just going to make it very modular, I just disconnect it when I deploy it, and name the pages something random. Tomorrow I should follow my schedule pretty strictly though. For the morning, I'll list and integrate the SEO stuff, and then work on my blog post. For the afternoon, I'll want to set up backend and the design for the course object, specifically its CRUD. It means getting down and dirty with graphql again. I wonder how I'd implement a demo user? I thought there should just be a user named \"demo\" that everything is attached to in a simple sqlite database. Registration capabilities won't exist, making them the only user. Any changes made will have to be reverted or just thrown away and mocked on front-end. That means in backend, the demo user has two modes: production and development. In development, you can do CRUD to test out those CRUD functions during integration testing, but in production, they're just thrown out and faked. Of course, this is for the demo, before any user login and authorization takes place. That will be its own confusion. But I'm typing myself out, I'll be back tomorrow morning. Till then! Time Worked: 8 hours","title":"May 9"},{"location":"journal/2022/may.html#may-10","text":"[6:42am] Time is moving too fast. It's already May 10th, I'm surprised. Today I'm going to be working on what I said I'd do yesterday. It'll be pretty uneventful. I'll try to complete everything as fast as I can so I can sit down and get started thinking about the app itself. I want to read other people's React code and see how more I can improve it. So far it seems to be in line with what I'm doing. I'm using far more states than I know to. I have a few problems as well, such as getting value. [7:38am] I'll have to sort the items on the audit. (List Pasted to May 11) [9:16am] I'm going to move on to writing my blog post. SEO is fun, but I'm hesitant on sharing my website until I can have good content up there. Sharing to my close and personals, that is. I want to switch focus over onto from a learning management system, to a textbook study tool. Or no... that makes it less than it is. Course manager? I think that's the closest to it. A course manager. Create, manage, and study your courses. With it, you can read and write notes, test yourself, etc. It's not neccesarily a self-learning management system, it's a course manager. That's perfect. But I can't then go into autodidacticism and anti-schooling. Maybe I still can? I don't want to hurt my product by giving it a lot of political or ideological baggage. I'll still go through my original blog post with fervor though, and then I'll care about that. I might spend a few more hours actually on re-aligning the content to that new framing. [3:18pm] Finished writing the rough draft. Writing articles is going to be an increasingly bigger problem. The act of writing can get uncomfortable, and unlike programming where I'm solving a problem, it's much easier to move on and procrastinate. So when writing, I want to create a different environment. I might just write it by hand. But anyways, time to focus on programming now. What did I say I'd do? Ah, yes. The course object. Course creation and modification, and then some design work for the UI. I'll actually work on that then, and at night I want to finish the SEO checklist. Then I'll need to allot some time to cleaning my code again. I'll want to create a checklist for that, and I'll want to do it by the end of the week. As I program, I'll onto it in the procrastination file. [5:57pm] I'm realizing that I have to do a bit more planning on the user story. I started off with course creation, but course creation itself has to come from an environment. I'll finish implementing the stuff for now. [7:43pm] I don't think I can work anymore. I have a problem with my psychiatry medication. My psychiatrist didn't refill my antipsychotic, and I've been off it for 2 or 3 days, and now I'm going through withdrawal. It's so far just an experience of intense depression. I'm falling into the habit of being on my phone too long, or scrolling through reddit trying to find stimulation. The problem is, I don't think I want to take my antipsychotic anymore. It's caused me tardive dyskinesia, which has a chance in becoming permanent, so I'm stopping it. I don't know why, but every antipsychotic I take, I somehow get bad side effects. With abilify it was weight gain, and now with Latuda it's involuntary tics. It's making me tired of psychiatry. I have two anti-depressants, one leftover, and a new one. I'm hoping that they will carry me through, but we'll see. It has a chance to severely impact my thinking, as such I'm going to have to go into \"lockdown\" on my life. I'm going to block websites, ban my phone. I'll need to go outside again, exercise, and be diligent with sleep. Life is going to be very hard again. It's a great annoyance. Why god gave me this illness, I don't know. There's no way to describe the horror of not being in control of your own mind. I can see myself deteriorating, split between the eyes of sanity and insanity. [9:04pm] I feel marginally better. I'm going to keep working again. Time Worked: 6 hours","title":"May 10"},{"location":"journal/2022/may.html#may-11","text":"[4:18am] Ugghughgghhgh. I slept at 10:30pm, woke up at 3:30am. I'm unable to sleep again. I figure I'll use the time to work, but this isn't good. Sleep is usually the greatest factor in my mental wellbeing. If I struggle with it, it's not a good sign. The good news is that I tried going from 0.5mg to 1mg of melatonin, and it worked really well. Much better than just 0.5mg, and it really hit 30-60 minutes after I took it. It has a good chance of replacing Latuda's helpful side effect of causing me to sleep. I think I can do this. [11:32am] Didn't do much, just three hours work focusing on my blog post. There was a power outage for a second early morning, but it went by. Now I'm going back to focusing on programming, but I want to talk a bit about my blog post. I became interested in writing it, but made it more of a mess. I turned it from 1600 words into 2600 words by pure ranting, and organized it up a bit. I want to print it out and do some hand-editing, but I think I want to find a way to edit on the computer. I might actually nap a little first, or rest my eyes. Anyways, after that, I really want to finish the frontend work that I told myself I'd do. I want to show it off to my parents, but I need to work into marketing a bit more, and put out my reworked vision statement. For now, I'll finish the course stuff I said I'd do yesterday, and then create a list for the dashboard and general structure around course creation before going into course creation itself. I'll start with the design first of that part. I have it in my head. A pull-out menu to the side that shows your courses, while the navigation header takes you to your notebook, textbook, etc. I still want to decide on how I want to show it. I thought originally to merge the text reader and notebook into a single page for \"study\", but I want to be able to middle-click the link have the text reader open in a new tab if I wanted to split windows instead of split-view inside the app itself. This allows me to use multiple monitors. [2:05pm] Took a little nap. Just sat my head back in bed. There's something strange about sleeping on my back, where I just nod in and out of sleep. It's the closest I'll ever get to feeling high. But anyways I have work to do. I finished the course object creation, and updateing. Now I just got to do deleting, and reading, but it's turning out to be very easy. I worry though it's just putting more work on frontend. In backend, it's easy to respond with the initial query for everything on a page. But creating a giant graphql query in frontend just to send it it, is not going to be very fun. meta description tag landing blog vision about responsiveness landing blog vision about increase page text content use main keywords across important html tags landing blog vision about add favicon title tag landing blog vision about increase keyword distribution set up analytics google search console google analytics Here's stuff I should do, but don't need to do right now link twitter link linkedin analytics tracking tool schema markup twitter cards link youtube channel use multiple different types of headers robots.txt [4:30pm] All done. It's so cool, I really want to show it off to friends and family. There's going to be a lot of optimization, design, and clean up work to do eventually, but I'm really proud of my work so far. I'll really only focus on marketing. I can't wait until I get enough content that I can improve the site again. For the next few days, it's just the app and marketing. So a lot of grunt work. I don't want to get into the dashboard right now. I want to actually focus on the content a bit before going into it. Time Worked: 6 hours","title":"May 11"},{"location":"journal/2022/may.html#may-12","text":"[9:02am] Ugh, it's almost May 14. I don't know why I keep dreading that date. It's when I have to get a cavity filled, which shouldn't be so stressful. It's just a cavity filling. I think it's the money worries. I woke up early today at around 6am, sleeping a bit better. It just took some time because I had some friendship drama. But now I only have work before me. Morning: Marketing. Work on the blog post, and then the vision statement. After that, we have the design work. There are some things I have to clean up. Namely, set things up in Figma to become a proper design system with components I can use to begin designing the app. I then design the dashboard. The dashboard will go from the structure to the course creation itself. Anything involving file uploads will be ignored, so for example the questions jsons and and the textbook file uploads. I'll create the components, then move on to front-end or back-end, depending on what I'm feeling. After that, integration. Lets go. [1:12pm] I feel so tired, and demotivated. Worse than yesterday. I don't know if it's the sleep or the withdrawal, it's getting scary. I'm going to remove a lot of things now. I'm finding myself scrolling too much. I'm going to nap as well. I'll be back. [3:46pm] I took a nap, again, and feel a bit more motivated. I really do think it's just lack of sleep now. I close my eyes for thirty minutes, and I wake up feeling normal again. It's going to mean I have to be very diligent with my sleep. I don't want to ruin it. Anyways, I spent an hour on the dashboard now, and the design is coming to me through frustration. I might want to do some paper layouts, and then moving on to implementing it in figma. The color scheme is annoying as well. Of course, I'm making it very simple since it's just the initial dashboard, but I still have to make it look nice. In the future, I'm going to implement tabs for when I eventually implement a curricula or subject structure, to organize these subjects in. I'm looking at other examples. Courses on EdX and Coursera. I'm also looking at Quizlet's cards. The issue with their setup is that they're vendors showing off many complicated different things. Quizlet isn't, but their cards are very small. I want my courses to feel very big, and static so that when the user doesn't feel comfortable modifying their courses. [9:06pm] I didn't work well today. I'm very annoyed about it. I'm going to have to change things, this isn't good. But it's time for me to try and sleep. I don't want to ruin it. I'll be back tomorrow to work and make up all this lost time, mark my words. Time Worked: 4.5 hours","title":"May 12"},{"location":"journal/2022/may.html#may-13","text":"[2:40pm] Not a good start. I mostly spent time watching old Johnny Carson interviews. But I did sleep fairly well. I'm going to get a start today on course creation. A question I'm having is with regards to the switch from course overview to course creation. I can use a modal popup, or I can use a different web page. I'll go with a modal. [5:00pm] I'm incredibly frustrated with the design. I'm not using Figma as good as I should. I'm cutting corners, doing things lazily. God damn it. I want to break everything down again. It's not good enough. But I'm going to push through it. So long as I build it and work. I'll revisit the design later, I just want to use this damn app. Time Worked: 3 hours","title":"May 13"},{"location":"journal/2022/may.html#may-14","text":"[9:15am] I feel much better now. It really was sleep. It turns out sleeping 4 or 5 disjointed hours every day for a few days can really ruin your motivation, who would've thought. I'm sleeping much better now as the withdrawal wears off. One worry is the fact that I'm having more and more trouble trying to fall asleep, likely due to the wellbutrin, which I ran out of today and need to get a refill on somehow. I'll see. I still have the Lexapro to survive off of, which will definitely rein true hell upon my sleep. So I'm going to try and see my family doctor and get a refill on it, maybe without taking it for a day or two. But for now, I can do things. I'm frustrated with the design still, it feels incredibly amateurish again, which is not what I felt before. I want to go back and rehaul everything before I move on to creating my app. My primary issue is with the color scheme, and the general \"feel\" of it. While I enjoy the lightness, and it's pretty formal, it's not \"correct\". For one, I'm unhappy with using a gradient for the background, which I did to add variety to my background, so it isn't just blank. However, it's making it very hard to play around with my color scheme. I would honestly choose black and white shades if I could just for ease of use, but I need color psychology in my design. One thing I'd like to add is to my email database which is a test@gmail.com account that allows you to just test if it works, and then throw it out. But yea, I'm going to ignore marketing for this morning, as I have a dentist appoint at 10:30am, which I'm leaving for at 10am. But for today, it's just entirely design. I have to put myself in the design headspace again. Moodboards, aesthetic, peace. I've been listening to generative synthesis mixes, which is a really clean headspace. I'm unsure if it's for education however. In Islam, there's a taboo against showing images of faces and creatures in art. The idea, aside from idolatry which is the more severe reason, is that you're trying to mimic god. It's very Platonic now that I think about it, but it gives a lot of things in islam a very \"inhuman\", or \"background\" sort of feel. Like what you're using, whether it's a building, or a prayer mat, or a book, is just an object to use. Unless they're meditated upon, it's rather boring. They can be beautiful, but you can't go \"oh, that's a person doing something\", there's no story to recognize. It makes it very unidimensional on the surface, but the beauty in islamic art is just how well they make the most of those restrictions. They rely heavily on complexity, composition, size, form, color, and light to drive emotion. It's hidden complexity as an art. I really want to be inspired by that, because that's what my web design aims are. The website I make is supposed to serve a function, it's not supposed to be something the user sees but \"feels\" as they navigate through the user experience. Whether that's instructing or informing the user, or providing the user your web service. Imagery can distract from that, but visuals can help, for example in instruction, but those visuals are often very clearly there for the user to see and are fairly active active. Another thing is I see a lot of graphics design on Dribbble as overly trendy. Everyone is copying each other, you rarely find an interesting and unique take on things unless you actively google it and see examples in those top ten lists. [9:47am] Now looking over my own website design, I'm going to criticize it and see what I can do to change it. I spoke on the color scheme before, but the color scheme itself doesn't really bother me. I rather enjoy the blue color scheme, but I don't enjoy the gradient, as I've already said. One thing I enjoy is the use of color in the different pages, which is done by using different gradients with one constant color, and another differing color. The blog page feels different than the landing page. What I don't enjoy is how minimal it is. It's minimal because of the lack of content, caused by the lack of character-building on my part. There's nothing much I can do about that. Grounding Myself to Reality: But anyways, after some quick thought, I want to say that I'm not going to overhaul the changes now. I think the reason why I'm frustrated is because I'm thinking the design now is not \"usable\", which is rather understandable. I'm just making the thing. But I do want to revisit the design. A lot of the frustration comes from an insecurity in how people will perceive it, which I personally think is fine, it pushes me to make it a lot better rather than be content with poor quality, or mediocrity. It just shouldn't stand in the way of actually building it, and ignoring the idea that I can eventually improve it anyways. So I'm going to make sure things are set up so that they can be built properly. [11:27am] Okay my mouth is numb, and my mind is fresh. I want to work on course CRUD still, just to have it done. But the work is surprisingly quick, save for the annoyance with design.","title":"May 14"},{"location":"journal/notes/fastapi.html","text":"FastAPI My notes for FastAPI. It follows after Flask's structure so it shouldn't be too bad. Tutorial - User Guide you use uvicorn to run it, which is an asgi web server you import FastApi() , assign it to an app variable. app then defines the route you use through , like app.get(\"/\") unlike flask, fastapi puts the http method in the decorator function, instead of it become a paramater you can use an async function path paramters: @app.get(\"/{variable}\") async def home(variable): return {\"variable\" : variable} you can assign types to path parameters home(variable: int): it'll return an http error if it's not respected data validation done with pydantic you can use python's Enum class to create predetermined path parameters, and then cycle through them. including other arguments not defined in the url as a parameter will maek them expected in queries instead Strawberry","title":"FastAPI"},{"location":"journal/notes/fastapi.html#fastapi","text":"My notes for FastAPI. It follows after Flask's structure so it shouldn't be too bad.","title":"FastAPI"},{"location":"journal/notes/fastapi.html#tutorial-user-guide","text":"you use uvicorn to run it, which is an asgi web server you import FastApi() , assign it to an app variable. app then defines the route you use through , like app.get(\"/\") unlike flask, fastapi puts the http method in the decorator function, instead of it become a paramater you can use an async function path paramters: @app.get(\"/{variable}\") async def home(variable): return {\"variable\" : variable} you can assign types to path parameters home(variable: int): it'll return an http error if it's not respected data validation done with pydantic you can use python's Enum class to create predetermined path parameters, and then cycle through them. including other arguments not defined in the url as a parameter will maek them expected in queries instead","title":"Tutorial - User Guide"},{"location":"journal/notes/fastapi.html#strawberry","text":"","title":"Strawberry"},{"location":"journal/notes/graphql.html","text":"GraphQL Date: 2022-05-03 Just my quick learning and notes on GraphQL. It's taken from their documentation , and yea. Introduction to GraphQL GraphQL(gql) is a query language for APIs created by defining types and fields on those types then assigning functions for each field on each type once a gql server is running, it can receive gql queries to validate and execute service checks a query to ensure it only refers to types and fields defined, then runs a function Queries and Mutations graphQL basic function is to ask for specific fields on objects example request: { hero { name } } example response: { \"data\": { \"hero\" : { \"name\" : \"R2-D2\" } } } you always get back what you expect, so you determine the structure you can pass arguments to the fields { human(id: \"1000\") { name height } } backend will handle that and return the data (the name and height) with that that id aliases are needed to distinguish between two identical requests. it's the alias name with a colon and then the object query fragments are reusable components of queries that you can define and just use them as much as you need to without re-writing the whole query. useful for handling complicated queries you can create variables defined in the query, within fragments as well apparently variables exist, they weren't mentioned before operation name is defines what you're doing, it includes query , fragment . so for example: query HeroGetter { hero { name } } query is the default operation, which is why we can ignore it in earlier requests variables are defined in the query, but are assigned values in a seperate structure, so that we can reassign a value without having to recreate the query we can assign a default value in the variable definition directives are a way to change the structure of our query according to variable values like using if statements there are only two core directives: @include(if: Boolean) : means to only include a field if the argument is true (variable replaces Boolean) @skip(if: Boolean) : means to skip the field if the argument is true they're the exact same thing, idk why. I guess you can't do \"if is not\", so that's why. mutations are the operations that manipulate data instead of query (like POST) You define your fields similar to a query, and then attach the values in the seperate structure you define variables in (usually a dictionary structure) returns the created data if successful migrations can include multiple fields inline fragments are required if you want to query a field that returns an interface or union type sometimes you don't know what type you're getting back, so you can use the meta field of __typename Schemas and Types A schema defines the types for your queries that are checked and validated the basic component to a schema is the object type type Character { name: String! appearsIn: [Episode!]! } the ! denotes that type is non-nullable, meaning data will always be returned every field of an object type can have zero or more arguments, to which we can set a default value you have to define a query type that defines the query you'll receive","title":"GraphQL"},{"location":"journal/notes/graphql.html#graphql","text":"Date: 2022-05-03 Just my quick learning and notes on GraphQL. It's taken from their documentation , and yea.","title":"GraphQL"},{"location":"journal/notes/graphql.html#introduction-to-graphql","text":"GraphQL(gql) is a query language for APIs created by defining types and fields on those types then assigning functions for each field on each type once a gql server is running, it can receive gql queries to validate and execute service checks a query to ensure it only refers to types and fields defined, then runs a function","title":"Introduction to GraphQL"},{"location":"journal/notes/graphql.html#queries-and-mutations","text":"graphQL basic function is to ask for specific fields on objects example request: { hero { name } } example response: { \"data\": { \"hero\" : { \"name\" : \"R2-D2\" } } } you always get back what you expect, so you determine the structure you can pass arguments to the fields { human(id: \"1000\") { name height } } backend will handle that and return the data (the name and height) with that that id aliases are needed to distinguish between two identical requests. it's the alias name with a colon and then the object query fragments are reusable components of queries that you can define and just use them as much as you need to without re-writing the whole query. useful for handling complicated queries you can create variables defined in the query, within fragments as well apparently variables exist, they weren't mentioned before operation name is defines what you're doing, it includes query , fragment . so for example: query HeroGetter { hero { name } } query is the default operation, which is why we can ignore it in earlier requests variables are defined in the query, but are assigned values in a seperate structure, so that we can reassign a value without having to recreate the query we can assign a default value in the variable definition directives are a way to change the structure of our query according to variable values like using if statements there are only two core directives: @include(if: Boolean) : means to only include a field if the argument is true (variable replaces Boolean) @skip(if: Boolean) : means to skip the field if the argument is true they're the exact same thing, idk why. I guess you can't do \"if is not\", so that's why. mutations are the operations that manipulate data instead of query (like POST) You define your fields similar to a query, and then attach the values in the seperate structure you define variables in (usually a dictionary structure) returns the created data if successful migrations can include multiple fields inline fragments are required if you want to query a field that returns an interface or union type sometimes you don't know what type you're getting back, so you can use the meta field of __typename","title":"Queries and Mutations"},{"location":"journal/notes/graphql.html#schemas-and-types","text":"A schema defines the types for your queries that are checked and validated the basic component to a schema is the object type type Character { name: String! appearsIn: [Episode!]! } the ! denotes that type is non-nullable, meaning data will always be returned every field of an object type can have zero or more arguments, to which we can set a default value you have to define a query type that defines the query you'll receive","title":"Schemas and Types"},{"location":"journal/notes/marketing.html","text":"Marketing & Sales I'm mostly going to be using hubspot's courses for this. I usually dislike courses like this, but hubspot's marketing game feels the best out of any of them providing educational resources. A marketing company that excels in its own marketing should be the best of the best. Marketing and sales, from my perspective, feels like a very vapid field, much like design. It feels like people trying to create a lot of self-importance over something that's largely intuitive. The real juice behind marketing for me are the artisans involved. The video editors, the copywriters, the data analysts. The skill and work required in those areas takes time to develop and hone. Creative-wise, I feel marketing is too limited by trend. Art is usually like that, limited by trend, where really the memorable ones are the ones able to carve out their own niche and style within the trend. Anyways, I still want to learn more about marketing. The processes involved, how to market, etc. So I'll just study now. Any writing in italics are my personal thoughts on the subject Marketing Courses Digital Marketing Section 1: Welcome to the Digital Marketing Certification Course Introduction to Digital Marketing Digital Marketing: any kind of marketing that happens on a digital platform. Inbound Marketing: business methodology that attracts customers through valuable content and tailored experiences This course is for digital marketing with inbound marketing perspective. Inbound Methodology: Method for growing an organization by building lasting relationships with people and helping them reach their goals. Basically, by helping them they like you. Sort of like what hubspot is doing now by providing free courses for marketing. I do feel some type of appreciation for the quality material they provide. This is similar to some concepts in sociology and social psychology. https://en.wikipedia.org/wiki/Social_studies_of_marketing Interesting area to get into. Section 2: Digital Marketing Fundamentals What is Digital Marketing? Having a blog is one of the ideal methods of inbound digital marketing. A channel for interacting with your customers. Focusing on a single channel is bad, divesify your channels. Making a positive impression requires delivery of relevant content when they need it and how they want it. Blog post, marketing email, customer testimonial, social media, target advertisement -> different channels you can use This is incredibly difficult. This is like playing the content creator game, which itself requires a lot of work and investment. Ugh. Types of digital marketing strategies: Content marketing: ebooks guides, blogs, videos, etc. SEO: search engine optimization, optimizing for search engine results Social Media Marketing: Social media channels, like Twitter, Facebook, etc. through promotion and communication. Native advertising: Just normal advertisements. Ad retargeting: retargeting technology delivers ads to individuals who previously visiting your website I won't this, tracking is gross to me. Email Marketing: sending email Take inbound approach to email so your marketing isn't spammy/promotional, make customers want to use your email. A Closer Look at Digital Marketing Channels B2B: digital marketing liekly focuses on online lead generation, and connecting leads to a salesperson focusing on highest quality leads focused on places like linkedin B2C: attract leads to website and become customers without talking to salesperson Depends on audience needs in buyer's journey. Create buyer's persona. Content Mapping: Targetting content according to... The characteristics of who will be consuming it (using buyer personas) How close the individual is to making the purchase (lifecycle stage) Suggested content formats for each stage of buyer's journey Awareness Stage Infographics Short Videos Consideration Stage eBooks Free Samples Webinars (more detailed interactive form of content) Decision Stage Case Studies Testimonials Implementing Your Digital Marketing Strategy Building a buyer persona use research pool of current customers, prospective customers, use real data as much as possible Identify goals and digital marketing tools marketing goals should be connected to the direct goal of your business Evaluate existing digital channels and assets Owned media, stuff you own or fully control Earned media, exposure through word of mount (distributed content) Paid media, stuff you pay for Plan your campaigns SEO content is the heart of digital marketing decide what content will help you reach your goal perform content audit, and rank each item that performs best audit earned content, look at where traffic and leads are coming from identify gaps develop a content creation plan: outlining content that's necessary Title Content Format Goal Promotional Channels Why you're creating the content Priority level of the content Section 2: Building a Content Creation Framework Why does your business need a content creation framework? You need publish a lot of content for each buyer persona at different stages of the buyer's journey Content Creation Framework: Structure of processes to publishing content from beginning to publishing ex. hubspot's user blog will have its own content creation framework they use a short term editorial calendar publish date/time of the content is given (scheduled) they publish an article daily i should publish weekly, and then see if I can do it quicker deadline of submitting the content is given (usually a week before publishing, so the editor can have a week to work on it) writer column for who's writing the post blog post title blog post description hubspot tool for using the product status column tells the status of the article (pending, confirmed, submitted, scheduled, published) editor column names the editor you can use a long term content creation framework for expected future features and releases of the product How to build a content creation framework 5 steps Conceptualizing content Planning a timeline Creating a workflow Reviewing and editing content Organizing Conceptualizing content First step is to come up with ideas for content offers Content offers are something you create and publish in exchange for personal info (like name and email address) Write down frequently asked sales questions and important industry knowledge that would be helpful for you target market to know. Focus on creating content for each part of the buyer's journey Awareness stage: prospect is experiencing and expressing symptoms of a problem/opportunity, and doing research to understand, frame and give a name to their problem educational content (blog, ebooks, videos) Consideration Stage: Prospect has clearly defined problem, and are researching all available methods to solving it. Decision Stage: Decided on solution strategy, and now choosing a vendor to solve it. Planning a timeline maintain agility while having time to execute initiatives keep goals in mind map out what content you need and when it needs to be live identify comapny-wide initiatives that need support from content over the next three months Creating a workflow sequence of steps from creation to publication get pretty granular with steps example workfolow: bad: written -> edited -> published good: outline completed -> first draft completed -> editing completed -> design and formatting completed -> final draft completed -> published review your workflow and see what works and what doesn't Reviewing and editing content keeps content accurate, well-written, and brand-aligned SEO specialist format and update content Best practices: set clear expectations you should know what to look for: grammatical errors, fact-checking, etc. define roles in the reviewal process what to do and when determine a timeline set due dates, and high-level timeline for accountability use a style guide track edits manage progress optimize for search Organizing and storing content (straightforward, I'll use vim and a github repo) framework should always be evolving Determining the resources you'll need for a content creation framwork 2 types of resources: Team and Tools Teams 5 responsibilities for content creation content management and strategy long-term content plan, mapping it to business needs and ensuring other responsibilites are met, and analyzing reports leader of the group writing the content writing/marketer don't need to be experts in the field rely on other people's expertise to inform your writing editing designing packaged in an appealing way to readers make it visually make sense blink test: the 3 to 5 seconds an average site visitor spends to scan visiaully and whether to decide to read it use tools like canva distributing bringing content to the channel, and schedulign it for publishing Tools CMS I already have my own rudimentary CMS, thank god for being technical Analytics Tools Google Analytics will probably be my choice here. Planning and internal communication tools How to Find the SEO Strategy that Fits Your Business How do search engines rank your content? How does content rank in search? build discovery(crawling) and relevance(indexing) by creating lots of high-quality content on the topics you want to be known for. build authority(ranking) by getting lots of high-quality links to your website discovery, relevance, authority Discovery web crawlers crawls your page relevance decides relevant your content is by indexing it authority stage search engine bots rank your content in search results based on your site's SEO authority credibility through back links directly impacts ranking strength Which SEO approach fits your business? You need time to build up authority. Don't copy other people, that's a mistake. Starts with compelling, unique high-quality content But you have to tell people about your topic Balance relevancy with authority with your needs both in my case :) How to measure your website's SEO authority backlinks are the most important measure quality and volume backlink profile: list of sites currently linking to your website, including how they're linking and which pages they're linking number of inbound links to your website number of unique domains quality of your stuff Improving Website Performance The importance of website performance speed at which web pages are deownloaded and displayed on a user's browser website performance impacts rankings in organic results facebook visibility user experience search engines want to offer the best experience to their users The standard to using a website is < 5.3 seconds Performance tricks minify compression (gzip) use existing hosting solutions image compression limit http requests increase page caching Creating Quality Blog Content Your Audience Loves to Read and Share Why blog post structure matters all effective blog posts have a blue print why your blog posts need structure gives direction content creation faster and efficient readers should easily comprehend what you're trying to tell them you want readers to tremember what you write about How to choose a topic and a title for a blog post at a high-level: write about educational content put yourself in the shoes of your buyer personas write about your industry, not yourself >:( or the organization you can start with a general topic and then go narrower keywords do keyword research, but don't incorporate as much keywords as possible (it's keyword stuffing and can harm SEO) use keywords in a natural way focus on one long-tail keyword per blog post a long-tail keywords is a targeted search phrase that takes more than three words, and contains a head term, a search term with only one or two words title creation a title needs to catch a user interest use a working title from a general topic a working title is a title to work off of (you can use your long-tail) make 5-10 different titles and get an opinion make the value of the post clear blog post title research findings ideal blog post title length is 60 characters headlines between 8-12 words are shared most often on twitter headlines between 12-14 words are liked most often on facebook headlines with a bracketed clarification performed 38% better than titles without clarification you can use Moz's title tag preview tool google shows first 50-60 characters, if it's cut off, show the key word in the beginning How to create and structure a blog post some formats list formula Intro Main Subheading 1 2 3 4 5 Subheading Conclusion how-to formula Intro Why it matters 1 2 3 4 5 Conclusion Subheading Conclusion make the intro captivating ideal blog post length is 2100 words formatting best practices: mention keyword at normal cadence (natural way, no keyword stuffing, use synonyms) whitespace is your friend (focus on content, not clutter use headers bold important texts use other forms of visual and multimedia use multimedia content to break up the blog post don't forget about mobile users (use responsive blog) How to optimize a blog post URL doesn't have to match title, shorten it don't include numbers like years Include alt-text in your images (use your keywords) Use meta description Insert links list external content when it's helpful have that content open in a different window link to other blog posts on your site call to actions include CTA after a few paragraph include CTA newar the most relevant content in the body of the post end of each post you can use a chatbot (bleh) What are some effective blog writing tips? first drafts are sloppy editing requires cutting out the unnecessary and irrelevant removing mistakes and errors to avoid embarassment remove fluffy words, and adverbs adhere to style guide before moving from writing to editin, take a break you can use the hemingway editor write like your ideal person is in front of you don't be snarky use spell check, even if you're a great writer you'll make mistakes","title":"Marketing & Sales"},{"location":"journal/notes/marketing.html#marketing-sales","text":"I'm mostly going to be using hubspot's courses for this. I usually dislike courses like this, but hubspot's marketing game feels the best out of any of them providing educational resources. A marketing company that excels in its own marketing should be the best of the best. Marketing and sales, from my perspective, feels like a very vapid field, much like design. It feels like people trying to create a lot of self-importance over something that's largely intuitive. The real juice behind marketing for me are the artisans involved. The video editors, the copywriters, the data analysts. The skill and work required in those areas takes time to develop and hone. Creative-wise, I feel marketing is too limited by trend. Art is usually like that, limited by trend, where really the memorable ones are the ones able to carve out their own niche and style within the trend. Anyways, I still want to learn more about marketing. The processes involved, how to market, etc. So I'll just study now. Any writing in italics are my personal thoughts on the subject","title":"Marketing &amp; Sales"},{"location":"journal/notes/marketing.html#marketing-courses","text":"","title":"Marketing Courses"},{"location":"journal/notes/marketing.html#digital-marketing","text":"","title":"Digital Marketing"},{"location":"journal/notes/marketing.html#section-1-welcome-to-the-digital-marketing-certification-course","text":"Introduction to Digital Marketing Digital Marketing: any kind of marketing that happens on a digital platform. Inbound Marketing: business methodology that attracts customers through valuable content and tailored experiences This course is for digital marketing with inbound marketing perspective. Inbound Methodology: Method for growing an organization by building lasting relationships with people and helping them reach their goals. Basically, by helping them they like you. Sort of like what hubspot is doing now by providing free courses for marketing. I do feel some type of appreciation for the quality material they provide. This is similar to some concepts in sociology and social psychology. https://en.wikipedia.org/wiki/Social_studies_of_marketing Interesting area to get into.","title":"Section 1: Welcome to the Digital Marketing Certification Course"},{"location":"journal/notes/marketing.html#section-2-digital-marketing-fundamentals","text":"What is Digital Marketing? Having a blog is one of the ideal methods of inbound digital marketing. A channel for interacting with your customers. Focusing on a single channel is bad, divesify your channels. Making a positive impression requires delivery of relevant content when they need it and how they want it. Blog post, marketing email, customer testimonial, social media, target advertisement -> different channels you can use This is incredibly difficult. This is like playing the content creator game, which itself requires a lot of work and investment. Ugh. Types of digital marketing strategies: Content marketing: ebooks guides, blogs, videos, etc. SEO: search engine optimization, optimizing for search engine results Social Media Marketing: Social media channels, like Twitter, Facebook, etc. through promotion and communication. Native advertising: Just normal advertisements. Ad retargeting: retargeting technology delivers ads to individuals who previously visiting your website I won't this, tracking is gross to me. Email Marketing: sending email Take inbound approach to email so your marketing isn't spammy/promotional, make customers want to use your email. A Closer Look at Digital Marketing Channels B2B: digital marketing liekly focuses on online lead generation, and connecting leads to a salesperson focusing on highest quality leads focused on places like linkedin B2C: attract leads to website and become customers without talking to salesperson Depends on audience needs in buyer's journey. Create buyer's persona. Content Mapping: Targetting content according to... The characteristics of who will be consuming it (using buyer personas) How close the individual is to making the purchase (lifecycle stage) Suggested content formats for each stage of buyer's journey Awareness Stage Infographics Short Videos Consideration Stage eBooks Free Samples Webinars (more detailed interactive form of content) Decision Stage Case Studies Testimonials Implementing Your Digital Marketing Strategy Building a buyer persona use research pool of current customers, prospective customers, use real data as much as possible Identify goals and digital marketing tools marketing goals should be connected to the direct goal of your business Evaluate existing digital channels and assets Owned media, stuff you own or fully control Earned media, exposure through word of mount (distributed content) Paid media, stuff you pay for Plan your campaigns SEO content is the heart of digital marketing decide what content will help you reach your goal perform content audit, and rank each item that performs best audit earned content, look at where traffic and leads are coming from identify gaps develop a content creation plan: outlining content that's necessary Title Content Format Goal Promotional Channels Why you're creating the content Priority level of the content","title":"Section 2: Digital Marketing Fundamentals"},{"location":"journal/notes/marketing.html#section-2-building-a-content-creation-framework","text":"Why does your business need a content creation framework? You need publish a lot of content for each buyer persona at different stages of the buyer's journey Content Creation Framework: Structure of processes to publishing content from beginning to publishing ex. hubspot's user blog will have its own content creation framework they use a short term editorial calendar publish date/time of the content is given (scheduled) they publish an article daily i should publish weekly, and then see if I can do it quicker deadline of submitting the content is given (usually a week before publishing, so the editor can have a week to work on it) writer column for who's writing the post blog post title blog post description hubspot tool for using the product status column tells the status of the article (pending, confirmed, submitted, scheduled, published) editor column names the editor you can use a long term content creation framework for expected future features and releases of the product How to build a content creation framework 5 steps Conceptualizing content Planning a timeline Creating a workflow Reviewing and editing content Organizing Conceptualizing content First step is to come up with ideas for content offers Content offers are something you create and publish in exchange for personal info (like name and email address) Write down frequently asked sales questions and important industry knowledge that would be helpful for you target market to know. Focus on creating content for each part of the buyer's journey Awareness stage: prospect is experiencing and expressing symptoms of a problem/opportunity, and doing research to understand, frame and give a name to their problem educational content (blog, ebooks, videos) Consideration Stage: Prospect has clearly defined problem, and are researching all available methods to solving it. Decision Stage: Decided on solution strategy, and now choosing a vendor to solve it. Planning a timeline maintain agility while having time to execute initiatives keep goals in mind map out what content you need and when it needs to be live identify comapny-wide initiatives that need support from content over the next three months Creating a workflow sequence of steps from creation to publication get pretty granular with steps example workfolow: bad: written -> edited -> published good: outline completed -> first draft completed -> editing completed -> design and formatting completed -> final draft completed -> published review your workflow and see what works and what doesn't Reviewing and editing content keeps content accurate, well-written, and brand-aligned SEO specialist format and update content Best practices: set clear expectations you should know what to look for: grammatical errors, fact-checking, etc. define roles in the reviewal process what to do and when determine a timeline set due dates, and high-level timeline for accountability use a style guide track edits manage progress optimize for search Organizing and storing content (straightforward, I'll use vim and a github repo) framework should always be evolving Determining the resources you'll need for a content creation framwork 2 types of resources: Team and Tools Teams 5 responsibilities for content creation content management and strategy long-term content plan, mapping it to business needs and ensuring other responsibilites are met, and analyzing reports leader of the group writing the content writing/marketer don't need to be experts in the field rely on other people's expertise to inform your writing editing designing packaged in an appealing way to readers make it visually make sense blink test: the 3 to 5 seconds an average site visitor spends to scan visiaully and whether to decide to read it use tools like canva distributing bringing content to the channel, and schedulign it for publishing Tools CMS I already have my own rudimentary CMS, thank god for being technical Analytics Tools Google Analytics will probably be my choice here. Planning and internal communication tools","title":"Section 2: Building a Content Creation Framework"},{"location":"journal/notes/marketing.html#how-to-find-the-seo-strategy-that-fits-your-business","text":"How do search engines rank your content? How does content rank in search? build discovery(crawling) and relevance(indexing) by creating lots of high-quality content on the topics you want to be known for. build authority(ranking) by getting lots of high-quality links to your website discovery, relevance, authority Discovery web crawlers crawls your page relevance decides relevant your content is by indexing it authority stage search engine bots rank your content in search results based on your site's SEO authority credibility through back links directly impacts ranking strength Which SEO approach fits your business? You need time to build up authority. Don't copy other people, that's a mistake. Starts with compelling, unique high-quality content But you have to tell people about your topic Balance relevancy with authority with your needs both in my case :) How to measure your website's SEO authority backlinks are the most important measure quality and volume backlink profile: list of sites currently linking to your website, including how they're linking and which pages they're linking number of inbound links to your website number of unique domains quality of your stuff","title":"How to Find the SEO Strategy that Fits Your Business"},{"location":"journal/notes/marketing.html#improving-website-performance","text":"The importance of website performance speed at which web pages are deownloaded and displayed on a user's browser website performance impacts rankings in organic results facebook visibility user experience search engines want to offer the best experience to their users The standard to using a website is < 5.3 seconds Performance tricks minify compression (gzip) use existing hosting solutions image compression limit http requests increase page caching","title":"Improving Website Performance"},{"location":"journal/notes/marketing.html#creating-quality-blog-content-your-audience-loves-to-read-and-share","text":"Why blog post structure matters all effective blog posts have a blue print why your blog posts need structure gives direction content creation faster and efficient readers should easily comprehend what you're trying to tell them you want readers to tremember what you write about How to choose a topic and a title for a blog post at a high-level: write about educational content put yourself in the shoes of your buyer personas write about your industry, not yourself >:( or the organization you can start with a general topic and then go narrower keywords do keyword research, but don't incorporate as much keywords as possible (it's keyword stuffing and can harm SEO) use keywords in a natural way focus on one long-tail keyword per blog post a long-tail keywords is a targeted search phrase that takes more than three words, and contains a head term, a search term with only one or two words title creation a title needs to catch a user interest use a working title from a general topic a working title is a title to work off of (you can use your long-tail) make 5-10 different titles and get an opinion make the value of the post clear blog post title research findings ideal blog post title length is 60 characters headlines between 8-12 words are shared most often on twitter headlines between 12-14 words are liked most often on facebook headlines with a bracketed clarification performed 38% better than titles without clarification you can use Moz's title tag preview tool google shows first 50-60 characters, if it's cut off, show the key word in the beginning How to create and structure a blog post some formats list formula Intro Main Subheading 1 2 3 4 5 Subheading Conclusion how-to formula Intro Why it matters 1 2 3 4 5 Conclusion Subheading Conclusion make the intro captivating ideal blog post length is 2100 words formatting best practices: mention keyword at normal cadence (natural way, no keyword stuffing, use synonyms) whitespace is your friend (focus on content, not clutter use headers bold important texts use other forms of visual and multimedia use multimedia content to break up the blog post don't forget about mobile users (use responsive blog) How to optimize a blog post URL doesn't have to match title, shorten it don't include numbers like years Include alt-text in your images (use your keywords) Use meta description Insert links list external content when it's helpful have that content open in a different window link to other blog posts on your site call to actions include CTA after a few paragraph include CTA newar the most relevant content in the body of the post end of each post you can use a chatbot (bleh) What are some effective blog writing tips? first drafts are sloppy editing requires cutting out the unnecessary and irrelevant removing mistakes and errors to avoid embarassment remove fluffy words, and adverbs adhere to style guide before moving from writing to editin, take a break you can use the hemingway editor write like your ideal person is in front of you don't be snarky use spell check, even if you're a great writer you'll make mistakes","title":"Creating Quality Blog Content Your Audience Loves to Read and Share"},{"location":"stories/marketing.html","text":"Marketing Stories Phase 1: Pre-Launch Epic: Pre-Launch Setup Marketing is currently on the backburner until I create the first itertion of the app. These are just preliminaries that will eventually set things up to having some traction when I launch the website. It includes the shallow site (landing page, blog, about me, plans), while the rest of the meat is with Monalect itself. I don't expect to them all at once. Rather, when I get tired of programming or designin Monalect, it's something I can return to or practice on. As a marketer we should have a keyword SEO sheet for use in our marketing content As a marketer, I'd like a pre-launch landing page to make users aware of our product. As a marketer, the page should allow users to be notified when our products launch As a marketer, the page should show our social media links to connect with us more As a marketer, we should be able to receive suggestions from prospective users about what they'd like on our product. As a marketer, our design should show we're serious about this product. As a marketer, the content here should use SEO keywords from our list. As a marketer I'd like a blog to create value so users can come check us out As a marketer, there should be an easy way for me to write blog posts or articles and put them up. As a marketer, I'd like a page to show users of our planned features, and what we've completed so far. As a marketer I'd like a page that shows our contact information so people can reach us if they so wish to. As a marketer the shallow site should be responsive for better SEO As a marketer, frontend metadata of various pages should allow for easy discovery SEO terms Value and content creation As a marketer, I'd like trivial tools made to attract users As a marketer, I'd like checklists people can use to become attracted to our website As a marketer, I'd like videos made that showcase our philosophy and product As a marketer, I'd like the ability to publish blog post at a specific time As a marketer, whenever a blog post is created, I'd like to have it put out to various mediums (pun intended)","title":"Marketing Stories"},{"location":"stories/marketing.html#marketing-stories","text":"","title":"Marketing Stories"},{"location":"stories/marketing.html#phase-1-pre-launch","text":"","title":"Phase 1: Pre-Launch"},{"location":"stories/marketing.html#epic-pre-launch-setup","text":"Marketing is currently on the backburner until I create the first itertion of the app. These are just preliminaries that will eventually set things up to having some traction when I launch the website. It includes the shallow site (landing page, blog, about me, plans), while the rest of the meat is with Monalect itself. I don't expect to them all at once. Rather, when I get tired of programming or designin Monalect, it's something I can return to or practice on. As a marketer we should have a keyword SEO sheet for use in our marketing content As a marketer, I'd like a pre-launch landing page to make users aware of our product. As a marketer, the page should allow users to be notified when our products launch As a marketer, the page should show our social media links to connect with us more As a marketer, we should be able to receive suggestions from prospective users about what they'd like on our product. As a marketer, our design should show we're serious about this product. As a marketer, the content here should use SEO keywords from our list. As a marketer I'd like a blog to create value so users can come check us out As a marketer, there should be an easy way for me to write blog posts or articles and put them up. As a marketer, I'd like a page to show users of our planned features, and what we've completed so far. As a marketer I'd like a page that shows our contact information so people can reach us if they so wish to. As a marketer the shallow site should be responsive for better SEO As a marketer, frontend metadata of various pages should allow for easy discovery SEO terms Value and content creation As a marketer, I'd like trivial tools made to attract users As a marketer, I'd like checklists people can use to become attracted to our website As a marketer, I'd like videos made that showcase our philosophy and product As a marketer, I'd like the ability to publish blog post at a specific time As a marketer, whenever a blog post is created, I'd like to have it put out to various mediums (pun intended)","title":"Epic: Pre-Launch Setup"},{"location":"stories/monalect.html","text":"Monalect Stories Phase 1: Create MVP These are the stories for the app itself. The MVP will be the minimum of what I'd find beneficial as a product. I'm lucky in that I'm part of the group that wants to use it, so I have a sense of when it's good enough to use and has positive value. This is that \"good enough.\" The next phase will implement more exciting features, but for now this is what I'm limiting myself to. Epic: User Creation & Management User Creation & Management As a user I want to access a registration form so that I can sign up for the app. As a user I want to validate my email address so that I can do a bunch of stuff As a user I want to login and logout so that I can manage access to my account Epic: Course Management Course Management As a user I should be able to define the title As a user I should be able to define the description As a user I should be able to manage my questions As a user I should be able to import questions. As a user I want to attach questions to specific lessons As a user I want to be able to remove questions from the list if it doesn't belong As a user I should be able to manage my lessons As a user I should be able to define lesson materials As a user I want to namelessons As a user I want to attach course materials to lessons. As a user I should be able to define the order of my lesssons. As a user I should be able to manage my course materials As a user I should be able to define a textbook as a course material As a user I should be able to define the sections of a textbook As a user I should be able to attach sections to a lesson As a user I should be able to define the metadata of the textbook As a user I should be able to define an article as a course material As a user I should be able to attach an article to a lesson As a user I should be able to upload an article as a user I should be able to save my course as a draft as a user I should be able to import a course template and modify it to my liking as a user I should be able to export my course after creating them as a user I should be able to access premade courses so I don't even have to think about creation Epic: Course Completion The actual act of going through a course and studying it. The meat of the program. Course Completion Notebook As a user I want to be able to format my notebook. As a user I want to be able to access my textbook while writing notes. As a user I want to create questions while writing notes. As a user I should be able to see how much words I've written. As a user I should be able to see progress towards certain goals. Text Reader As a user I should be able to read my learning materials As a user I should be able to see what lesson I'm on when reading a textbook or article As a user I should be able to jump to pages at the start of each lesson As a user I should be able to access my notebook while reading As a user I should be able to create a question while reading As a user I should be able to access the last textbook I opened when I open it again As a user I should be able to redownload my textbook As a user I should be able to highlight my texts (last priority) Questions As a user I should be able to reassign my questions As a user I should be able to CRUD operations on a question As a user, answers should be hidden from me so I don't spoil myself everytime I want to edit questions As a user I should be able to create a test for these questions. As a user I should be able to export my questions As a user I should be able to review my questions Goals As a user I should be able to CRUD goals As a user I should be able to automatically receive goals after they've completed As a user I should be able to see my goals as I progress through them on other pages As a user I should see a list of my previous completed goals/accomplishments Quizzes & Exams As a user I should be able to quiz myself against questions without worry. As a user I should be able to see if I got it wrong right after I answer As a user I should be able to examinate myself against questions to formally measure my knowledge. As a user I should also be able to do practice exams to see my level without recording my mark As a user I shouldn't feel discouraged as I go through these questions that I quit before finishing it As a user I should be able to choose the number of questions from each lesson I test against Completion As a user I want to be able to review completed courses As a user I want to see how long since I reviewed it so I can restudy it when necessary As a user I want to be able to \"uncomplete\" a course and access it","title":"Monalect Stories"},{"location":"stories/monalect.html#monalect-stories","text":"","title":"Monalect Stories"},{"location":"stories/monalect.html#phase-1-create-mvp","text":"These are the stories for the app itself. The MVP will be the minimum of what I'd find beneficial as a product. I'm lucky in that I'm part of the group that wants to use it, so I have a sense of when it's good enough to use and has positive value. This is that \"good enough.\" The next phase will implement more exciting features, but for now this is what I'm limiting myself to.","title":"Phase 1: Create MVP"},{"location":"stories/monalect.html#epic-user-creation-management","text":"User Creation & Management As a user I want to access a registration form so that I can sign up for the app. As a user I want to validate my email address so that I can do a bunch of stuff As a user I want to login and logout so that I can manage access to my account","title":"Epic: User Creation &amp; Management"},{"location":"stories/monalect.html#epic-course-management","text":"Course Management As a user I should be able to define the title As a user I should be able to define the description As a user I should be able to manage my questions As a user I should be able to import questions. As a user I want to attach questions to specific lessons As a user I want to be able to remove questions from the list if it doesn't belong As a user I should be able to manage my lessons As a user I should be able to define lesson materials As a user I want to namelessons As a user I want to attach course materials to lessons. As a user I should be able to define the order of my lesssons. As a user I should be able to manage my course materials As a user I should be able to define a textbook as a course material As a user I should be able to define the sections of a textbook As a user I should be able to attach sections to a lesson As a user I should be able to define the metadata of the textbook As a user I should be able to define an article as a course material As a user I should be able to attach an article to a lesson As a user I should be able to upload an article as a user I should be able to save my course as a draft as a user I should be able to import a course template and modify it to my liking as a user I should be able to export my course after creating them as a user I should be able to access premade courses so I don't even have to think about creation","title":"Epic: Course Management"},{"location":"stories/monalect.html#epic-course-completion","text":"The actual act of going through a course and studying it. The meat of the program. Course Completion Notebook As a user I want to be able to format my notebook. As a user I want to be able to access my textbook while writing notes. As a user I want to create questions while writing notes. As a user I should be able to see how much words I've written. As a user I should be able to see progress towards certain goals. Text Reader As a user I should be able to read my learning materials As a user I should be able to see what lesson I'm on when reading a textbook or article As a user I should be able to jump to pages at the start of each lesson As a user I should be able to access my notebook while reading As a user I should be able to create a question while reading As a user I should be able to access the last textbook I opened when I open it again As a user I should be able to redownload my textbook As a user I should be able to highlight my texts (last priority) Questions As a user I should be able to reassign my questions As a user I should be able to CRUD operations on a question As a user, answers should be hidden from me so I don't spoil myself everytime I want to edit questions As a user I should be able to create a test for these questions. As a user I should be able to export my questions As a user I should be able to review my questions Goals As a user I should be able to CRUD goals As a user I should be able to automatically receive goals after they've completed As a user I should be able to see my goals as I progress through them on other pages As a user I should see a list of my previous completed goals/accomplishments Quizzes & Exams As a user I should be able to quiz myself against questions without worry. As a user I should be able to see if I got it wrong right after I answer As a user I should be able to examinate myself against questions to formally measure my knowledge. As a user I should also be able to do practice exams to see my level without recording my mark As a user I shouldn't feel discouraged as I go through these questions that I quit before finishing it As a user I should be able to choose the number of questions from each lesson I test against Completion As a user I want to be able to review completed courses As a user I want to see how long since I reviewed it so I can restudy it when necessary As a user I want to be able to \"uncomplete\" a course and access it","title":"Epic: Course Completion"},{"location":"stories/security.html","text":"Security Stories These are just here to make sure I'm not pwned. They're not a priority in the first part of the website. I have alternatives of doing things like blacklisting IPs and stuff, this is just to incorporate it into the app itself so it's seperate from the actual hosting mechanism. That way I don't need to manually add an ip to the firewall everytime. User Choice As an admin I want the ability to block certain users so that I can ban malicious users.","title":"Security Stories"},{"location":"stories/security.html#security-stories","text":"These are just here to make sure I'm not pwned. They're not a priority in the first part of the website. I have alternatives of doing things like blacklisting IPs and stuff, this is just to incorporate it into the app itself so it's seperate from the actual hosting mechanism. That way I don't need to manually add an ip to the firewall everytime.","title":"Security Stories"},{"location":"stories/security.html#_1","text":"User Choice As an admin I want the ability to block certain users so that I can ban malicious users.","title":""},{"location":"stories/tickets/user/0.html","text":"Login Form Estimated Time: 2 days Description Story: As a user I want to access a registration form so that I can sign up for the app . Acceptance Criteria: Given I'm in the role of the user on the landing page I should open the form to register I should input my username I should receive feedback on whether my username is valid I should input my password I should receive feedback on whether my password is valid I should toggle my password visibility to see I didn't write a mistake I should optionally input my email If I input my email, I should receive feedback on whether my email is valid. I should be blisfully unaware of Recaptcha v3, but it works to prove I'm not a bot I should submit my form. I should find myself registered. If I'm not, then I receive a reason as to why I'm not registered. Tasklist Figma Designs TextInput Button Modal Form ~~Design Integration w/ the Website Design~~ Frontend Components TextInput Javascript Sass Button Javascript Sass Modal Javascript Sass Form Javascript Sass Functions Username Handling Shallow Validation (required, alphanumeric, 4-32 characters) Email Handling Shallow Validation (optional, email validation) Password Handling Shallow Validation (required, alphanumeric+special, 12-32) Visible Toggle Captcha Handling Form Handling Send to API Feedback Success (redirect) Failure Careful of XSS Backend Setup Captcha Handling (check if user is even allowed to register) Register User Username Handling Deep Validation Unique Handling Email Handling Deep Validation syntax validation use email-validator python library Unique Handling Password Handling Deep Validation User stored username email email verified (all set to false in this case until email confirmation is set up) password salt+hash date created Feedback (HTTP Status Codes) 422: Unprocessable Entity (contain reason in body) username not unique username invalid email not unique email invalid email doesn't exist password invalid 401: Unauthorized captcha failed Testing Integration (Frontend, Backend) Rambling That's a lot of work, mein gott. But let's get to it, starting from the beginning.","title":"Login Form"},{"location":"stories/tickets/user/0.html#login-form","text":"Estimated Time: 2 days","title":"Login Form"},{"location":"stories/tickets/user/0.html#description","text":"Story: As a user I want to access a registration form so that I can sign up for the app . Acceptance Criteria: Given I'm in the role of the user on the landing page I should open the form to register I should input my username I should receive feedback on whether my username is valid I should input my password I should receive feedback on whether my password is valid I should toggle my password visibility to see I didn't write a mistake I should optionally input my email If I input my email, I should receive feedback on whether my email is valid. I should be blisfully unaware of Recaptcha v3, but it works to prove I'm not a bot I should submit my form. I should find myself registered. If I'm not, then I receive a reason as to why I'm not registered.","title":"Description"},{"location":"stories/tickets/user/0.html#tasklist","text":"Figma Designs TextInput Button Modal Form ~~Design Integration w/ the Website Design~~ Frontend Components TextInput Javascript Sass Button Javascript Sass Modal Javascript Sass Form Javascript Sass Functions Username Handling Shallow Validation (required, alphanumeric, 4-32 characters) Email Handling Shallow Validation (optional, email validation) Password Handling Shallow Validation (required, alphanumeric+special, 12-32) Visible Toggle Captcha Handling Form Handling Send to API Feedback Success (redirect) Failure Careful of XSS Backend Setup Captcha Handling (check if user is even allowed to register) Register User Username Handling Deep Validation Unique Handling Email Handling Deep Validation syntax validation use email-validator python library Unique Handling Password Handling Deep Validation User stored username email email verified (all set to false in this case until email confirmation is set up) password salt+hash date created Feedback (HTTP Status Codes) 422: Unprocessable Entity (contain reason in body) username not unique username invalid email not unique email invalid email doesn't exist password invalid 401: Unauthorized captcha failed Testing Integration (Frontend, Backend)","title":"Tasklist"},{"location":"stories/tickets/user/0.html#rambling","text":"That's a lot of work, mein gott. But let's get to it, starting from the beginning.","title":"Rambling"}]}