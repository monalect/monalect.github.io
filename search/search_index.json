{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Monalect About Monalect is a personal learning management system meant to allow a user to create and organize their own course to go through, as well as share. Thus allowing other users to be able to go through courses without needing to create their own. The idea is the use can upload their own learning materials by way of pdfs, and link material like lectures, and then the app itself will incorporate it into a place they can learn. That is the basic idea. The vision is that it will eventually lead to a social network where people can study and learn with others. Deadline The deadline for this project is May 31st. That leaves from now (April 26) about 35 days. More than enough if I spend them wisely. That's why this website is here. This documentation will serve as a journal, road-map, feature plan, and project requirement document to facilitate its efficient creation.","title":"Monalect"},{"location":"#monalect","text":"","title":"Monalect"},{"location":"#about","text":"Monalect is a personal learning management system meant to allow a user to create and organize their own course to go through, as well as share. Thus allowing other users to be able to go through courses without needing to create their own. The idea is the use can upload their own learning materials by way of pdfs, and link material like lectures, and then the app itself will incorporate it into a place they can learn. That is the basic idea. The vision is that it will eventually lead to a social network where people can study and learn with others.","title":"About"},{"location":"#deadline","text":"The deadline for this project is May 31st. That leaves from now (April 26) about 35 days. More than enough if I spend them wisely. That's why this website is here. This documentation will serve as a journal, road-map, feature plan, and project requirement document to facilitate its efficient creation.","title":"Deadline"},{"location":"design/components/","text":"Components This is a list of components that I plan to use. Button STYLES: Text button Icon button Text + Icon button STATES: Disabled Primary Secondary Danger SIZES: small medium large TextInput +","title":"Components"},{"location":"design/components/#components","text":"This is a list of components that I plan to use. Button STYLES: Text button Icon button Text + Icon button STATES: Disabled Primary Secondary Danger SIZES: small medium large TextInput +","title":"Components"},{"location":"design/design_language/","text":"Design Language Brand Vision Here's the vision statement Design Principles Design Principles: 1. Minimal, Simple, Clean Create as few options as possible. If options or features aren't needed, then don't implement them. Keep the UI/UX uncluttered, this includes hiding everything under the rug. 2. Mature Our users are trying to learn serious topics. No emojis, no \"oopsie woopsie we made a fucky wucky\", none of that. 3. Warm and Welcoming Ideally, our users are going to be spending a lot of time studying on Monalect, so make it cozy. Lots of warm colors, kind language, \"enclosed\" design. Tone of Voice Mature, warm, kind, and quiet . We shouldn't have to say much. Terminology: Button Tiles Writing Guidelines: Acronyms must be defined and then bracketed upon when first used. Also surrounded by abbr tag. The British Broadcasting Company (<abbr>BBC</abbr>) is a blah blah... British English Logo Usage Guidance The Monalect Logo should be placed on the left of text, or above it. Text should be lined middle of the logo, and be spaced from it. Adjust size to what feels good using spacing. NEVER replace an 'O' with the logo. Colored based on context, the standard is close to black, but always contrast. The logo is simple though, it'd be hard to screw it up. When very large, it's advisable to texture it. I went with the texture from an etching on the landing page. Keep it literary. Use alt=\"Monalect Logo: A circle with a dot in the middle, the symbol of the Monad, with three pillars hidden behind it, giving the semblance of a letter M.\" in any img tag. Different File Formats Use an SVG to PNG/JPG converter, lazy. Guidelines Accessibility I'll try to atleast get on to the A level for the design system and for the MVP itself. Use this: https://www.w3.org/WAI/WCAG21/quickref/ Quick guidelines: aria-label interactive components alt-text images don't rely on color User Onboarding User onboarding is a good question. I don't have the will to create a whole tutorial for the user, but I'll have to show them some way. For now, force the user to read documentation. Microcopy Guidelines: Curt. Less words the better. Less letters the better.","title":"Design Language"},{"location":"design/design_language/#design-language","text":"","title":"Design Language"},{"location":"design/design_language/#brand","text":"","title":"Brand"},{"location":"design/design_language/#vision","text":"Here's the vision statement","title":"Vision"},{"location":"design/design_language/#design-principles","text":"Design Principles:","title":"Design Principles"},{"location":"design/design_language/#1-minimal-simple-clean","text":"Create as few options as possible. If options or features aren't needed, then don't implement them. Keep the UI/UX uncluttered, this includes hiding everything under the rug.","title":"1. Minimal, Simple, Clean"},{"location":"design/design_language/#2-mature","text":"Our users are trying to learn serious topics. No emojis, no \"oopsie woopsie we made a fucky wucky\", none of that.","title":"2. Mature"},{"location":"design/design_language/#3-warm-and-welcoming","text":"Ideally, our users are going to be spending a lot of time studying on Monalect, so make it cozy. Lots of warm colors, kind language, \"enclosed\" design.","title":"3. Warm and Welcoming"},{"location":"design/design_language/#tone-of-voice","text":"Mature, warm, kind, and quiet . We shouldn't have to say much.","title":"Tone of Voice"},{"location":"design/design_language/#terminology","text":"Button Tiles","title":"Terminology:"},{"location":"design/design_language/#writing-guidelines","text":"Acronyms must be defined and then bracketed upon when first used. Also surrounded by abbr tag. The British Broadcasting Company (<abbr>BBC</abbr>) is a blah blah... British English","title":"Writing Guidelines:"},{"location":"design/design_language/#logo","text":"","title":"Logo"},{"location":"design/design_language/#usage-guidance","text":"The Monalect Logo should be placed on the left of text, or above it. Text should be lined middle of the logo, and be spaced from it. Adjust size to what feels good using spacing. NEVER replace an 'O' with the logo. Colored based on context, the standard is close to black, but always contrast. The logo is simple though, it'd be hard to screw it up. When very large, it's advisable to texture it. I went with the texture from an etching on the landing page. Keep it literary. Use alt=\"Monalect Logo: A circle with a dot in the middle, the symbol of the Monad, with three pillars hidden behind it, giving the semblance of a letter M.\" in any img tag.","title":"Usage Guidance"},{"location":"design/design_language/#different-file-formats","text":"Use an SVG to PNG/JPG converter, lazy.","title":"Different File Formats"},{"location":"design/design_language/#guidelines","text":"","title":"Guidelines"},{"location":"design/design_language/#accessibility","text":"I'll try to atleast get on to the A level for the design system and for the MVP itself. Use this: https://www.w3.org/WAI/WCAG21/quickref/ Quick guidelines: aria-label interactive components alt-text images don't rely on color","title":"Accessibility"},{"location":"design/design_language/#user-onboarding","text":"User onboarding is a good question. I don't have the will to create a whole tutorial for the user, but I'll have to show them some way. For now, force the user to read documentation.","title":"User Onboarding"},{"location":"design/design_language/#microcopy-guidelines","text":"Curt. Less words the better. Less letters the better.","title":"Microcopy Guidelines:"},{"location":"design/design_tokens/","text":"Design Tokens Colour","title":"Design Tokens"},{"location":"design/design_tokens/#design-tokens","text":"","title":"Design Tokens"},{"location":"design/design_tokens/#colour","text":"","title":"Colour"},{"location":"design/tasklist/","text":"Design Tasks Design System Stolen from https://www.designsystemchecklist.com/ , really brilliant resource. Check it out! I'll include a literal representation at the bottom so you can copy and use it. Design Language: Like any language, a design language is a methodical way of communicating with your audience through your approach to product design. It\u2019s the cornerstone of consistent customer experiences. Brand: Brand drives every single decision you make when building new products or features. A good brand is much more than a name and a logo. It\u2019s the values that define your unique identity and what makes you stand out from others. Vision: Why you exist, what your values are and how they\u2019ll help guide the future of your product. Design Principles: The considerations that guide the basis of your practice. They outline how you approach design from a philosophical perspective and help with everyday decisions. Tone of Voice: A clear tone of voice defines how you speak to your audience at every moment in their journey, helping them get wherever they want to go. Terminology: Create the standard terms and phrases that need to be kept the same throughout the user experience, speeding up the design process and unifying your voice. Writing guidelines: Every consistent experience needs watertight writing. Laying down the foundations for your house style early keeps everything in line with consistent grammar, style choices and action-oriented language to help your design. Logo: Most customers form an opinion about a product in seconds. In most cases, your logo will be the first brand asset someone sees. It\u2019s all about making the right first impression. A distinctive logo helps users recognise a product immediately and gives them the essence of your branding. Monochrome Version: A monochrome version of your logo that looks good on top of photography or when it\u2019s printed with a poor quality printer. Small use guidance: Your logo must perform well and be recognisable at all sizes. Tips for using your logo in these cases will minimise the risk of it being misused. Placement and Clearance Guidance: Your logo must come with clear guidance on how to place it and how to preserve its space since it lives along with other content. Usage Guidance: These are the logo crimes, providing contextual examples of what to (not) do with your logo. Different File Formats: Providing a variety of formats for the vector version of your logo will make it easier for others to work and prevent anyone from redrawing it. Guidelines: Providing guidance on how to approach common UX patterns will allow your organisation to establish a consistent approach and a consistent user experience on any platform. Accessibility: Guidelines for how you approach accessibility and how you leverage colour, hierarchy and assistive technologies to help your users. User Onboarding: How you onboard your users to your product or a new feature and give them a great experience from the start. Microcopy Guidelines: The standard way to write for the components in your design system. These take platform conventions and best practices for writing all into consideration. Design Tokens: Variables that store values for the base layer of your design system, like colour and typography. They\u2019re used in components, so changes on this level will resonate throughout the whole system. Colour : Not only an efficient way to showcase your brand, but also an efficient way to communicate with your users. Colour palettes created with purpose over aesthetics in mind can help you create intuitive design patterns by adding meaning to your interface. Accessibility: Make sure to have accessible pairings between the main colours in your palette. More importantly, make sure that your background and text colours have at least an AA standard contrast ratio between them. Functional Colours: Besides your brand colours, make sure to have colours defined and made into variables for functions like disabled states, backgrounds, actions and high contrast text. Dark Mode: Preparing a dark mode version of your colour palette will allow your design system to adapt to dark mode and respect what your user wants to see. Guidelines: Provide guidelines on how and when to use the colours in your palette, what to keep in mind when working with them and how not to use them. Layout: A well thought out layout goes a long way. Consistent use of a grid and spacing makes it easier for your users to scan the user interface and grasp the content. Units: Units are the most granular building blocks for layout. Defining a set of values with consistent increments (such as 4, 8, 12 and 16 for a 4-point system) will provide you with the foundation when you\u2019re designing your grid and spacing values. Grid: Every layout should sit on a grid that brings order and hierarchy to the interface. Define a grid separately for mobile, tablet and desktop devices with columns, gutters, and margins so your interface can adapt to any platform easily. Breakpoints: Predefine the screen sizes and orientations your grid will adapt to. Spacing: Horizontal and vertical rhythm plays a big role in a layout. You should provide easy methods for adding space between interface elements independent of your grid. Typography: Typography is one of the main ways you surface content in products. A clear hierarchy and contrasting styles in your typography scale will make things easier to read and help with the overall structure of your product. It\u2019s also an opportunity to visualise your brand character and presence. Responsiveness: Desktop devices can usually afford to have bigger font sizes compared to mobile devices. Creating a typography scale that adapts to the viewport size will help with a more meaningful hierarchy and layout. Grid Relation: Font sizes and leading should match your grid to allow better pairing between text and other UI elements. A good example of this is text paired with icons with bounding boxes. Readability: Optimising the letter spacing (tracking), line height (leading) and line length for your typography scale will help with the readability of text. Performance: Custom fonts need to be downloaded before they can be displayed, especially on the web. Make sure that you have sensible fallbacks and fast loading time for your typography assets. Using system fonts solves this performance problem. Guidelines: Provide guidelines on how and when to use the pairings in your typography scale, what to keep in mind when working with them and how not to use them. Iconography: Icons are symbols that represent functionality or content. They\u2019re especially recognisable and helpful in user interfaces since their meaning can be understood at a glance. hough they can be used just for decoration, their full potential can be realised when they\u2019re used meaningfully and consistently. Accessibility: For icons that convey a meaning or serve a function, add the necessary support for screen readers. You can skip this for decorative icons. Style: Make sure that your icon family makes visual sense as a whole. Picking an outlined or filled style and sticking with it will lead to better visual consistency and predictability. Naming: Name your icons based on what they are, not what they represent. For instance, a trash icon should be named trash, not delete. You can still add related keywords to improve discoverability. Relation with Grid: Draw your icons in a bounding box that plays well with your grid. This makes for a better pairing with other UI elements. A good example of this would be icons with bounding boxes paired with text. Sizes: Provide different sizes for icons that correlate to your grid. Provide a minimum size and remove unnecessary detail for your icons for smaller sizes. Keywords: Adding keywords will improve the discoverability of each icon and provide a better user experience for anyone using your system. Reserved Icons: Reserving icons that represent common actions will prevent their use in any other context. System icons for navigation or adding and deleting are a good example. This leads to a more intuitive user experience. Guidelines: Provide guidelines on how and when to use icons, what to keep in mind when working with them and how not to use them. Core Components: Components are the main building blocks for user interfaces. Building a reusable component library enhances your product development workflow by reducing design and tech debt and speeding up the process. Core components can\u2019t be broken down into granular pieces without losing their meaning. Avatar: Avatars are used to show a thumbnail of a user photo or a visual representation of any other type of content. Image: Avatars should mask an image into their shape and work with any image size since they may get this image from unknown data sources. Raw Markdown Here's the raw Markdown for you to use.","title":"Design Tasks"},{"location":"design/tasklist/#design-tasks","text":"","title":"Design Tasks"},{"location":"design/tasklist/#design-system","text":"Stolen from https://www.designsystemchecklist.com/ , really brilliant resource. Check it out! I'll include a literal representation at the bottom so you can copy and use it. Design Language: Like any language, a design language is a methodical way of communicating with your audience through your approach to product design. It\u2019s the cornerstone of consistent customer experiences. Brand: Brand drives every single decision you make when building new products or features. A good brand is much more than a name and a logo. It\u2019s the values that define your unique identity and what makes you stand out from others. Vision: Why you exist, what your values are and how they\u2019ll help guide the future of your product. Design Principles: The considerations that guide the basis of your practice. They outline how you approach design from a philosophical perspective and help with everyday decisions. Tone of Voice: A clear tone of voice defines how you speak to your audience at every moment in their journey, helping them get wherever they want to go. Terminology: Create the standard terms and phrases that need to be kept the same throughout the user experience, speeding up the design process and unifying your voice. Writing guidelines: Every consistent experience needs watertight writing. Laying down the foundations for your house style early keeps everything in line with consistent grammar, style choices and action-oriented language to help your design. Logo: Most customers form an opinion about a product in seconds. In most cases, your logo will be the first brand asset someone sees. It\u2019s all about making the right first impression. A distinctive logo helps users recognise a product immediately and gives them the essence of your branding. Monochrome Version: A monochrome version of your logo that looks good on top of photography or when it\u2019s printed with a poor quality printer. Small use guidance: Your logo must perform well and be recognisable at all sizes. Tips for using your logo in these cases will minimise the risk of it being misused. Placement and Clearance Guidance: Your logo must come with clear guidance on how to place it and how to preserve its space since it lives along with other content. Usage Guidance: These are the logo crimes, providing contextual examples of what to (not) do with your logo. Different File Formats: Providing a variety of formats for the vector version of your logo will make it easier for others to work and prevent anyone from redrawing it. Guidelines: Providing guidance on how to approach common UX patterns will allow your organisation to establish a consistent approach and a consistent user experience on any platform. Accessibility: Guidelines for how you approach accessibility and how you leverage colour, hierarchy and assistive technologies to help your users. User Onboarding: How you onboard your users to your product or a new feature and give them a great experience from the start. Microcopy Guidelines: The standard way to write for the components in your design system. These take platform conventions and best practices for writing all into consideration. Design Tokens: Variables that store values for the base layer of your design system, like colour and typography. They\u2019re used in components, so changes on this level will resonate throughout the whole system. Colour : Not only an efficient way to showcase your brand, but also an efficient way to communicate with your users. Colour palettes created with purpose over aesthetics in mind can help you create intuitive design patterns by adding meaning to your interface. Accessibility: Make sure to have accessible pairings between the main colours in your palette. More importantly, make sure that your background and text colours have at least an AA standard contrast ratio between them. Functional Colours: Besides your brand colours, make sure to have colours defined and made into variables for functions like disabled states, backgrounds, actions and high contrast text. Dark Mode: Preparing a dark mode version of your colour palette will allow your design system to adapt to dark mode and respect what your user wants to see. Guidelines: Provide guidelines on how and when to use the colours in your palette, what to keep in mind when working with them and how not to use them. Layout: A well thought out layout goes a long way. Consistent use of a grid and spacing makes it easier for your users to scan the user interface and grasp the content. Units: Units are the most granular building blocks for layout. Defining a set of values with consistent increments (such as 4, 8, 12 and 16 for a 4-point system) will provide you with the foundation when you\u2019re designing your grid and spacing values. Grid: Every layout should sit on a grid that brings order and hierarchy to the interface. Define a grid separately for mobile, tablet and desktop devices with columns, gutters, and margins so your interface can adapt to any platform easily. Breakpoints: Predefine the screen sizes and orientations your grid will adapt to. Spacing: Horizontal and vertical rhythm plays a big role in a layout. You should provide easy methods for adding space between interface elements independent of your grid. Typography: Typography is one of the main ways you surface content in products. A clear hierarchy and contrasting styles in your typography scale will make things easier to read and help with the overall structure of your product. It\u2019s also an opportunity to visualise your brand character and presence. Responsiveness: Desktop devices can usually afford to have bigger font sizes compared to mobile devices. Creating a typography scale that adapts to the viewport size will help with a more meaningful hierarchy and layout. Grid Relation: Font sizes and leading should match your grid to allow better pairing between text and other UI elements. A good example of this is text paired with icons with bounding boxes. Readability: Optimising the letter spacing (tracking), line height (leading) and line length for your typography scale will help with the readability of text. Performance: Custom fonts need to be downloaded before they can be displayed, especially on the web. Make sure that you have sensible fallbacks and fast loading time for your typography assets. Using system fonts solves this performance problem. Guidelines: Provide guidelines on how and when to use the pairings in your typography scale, what to keep in mind when working with them and how not to use them. Iconography: Icons are symbols that represent functionality or content. They\u2019re especially recognisable and helpful in user interfaces since their meaning can be understood at a glance. hough they can be used just for decoration, their full potential can be realised when they\u2019re used meaningfully and consistently. Accessibility: For icons that convey a meaning or serve a function, add the necessary support for screen readers. You can skip this for decorative icons. Style: Make sure that your icon family makes visual sense as a whole. Picking an outlined or filled style and sticking with it will lead to better visual consistency and predictability. Naming: Name your icons based on what they are, not what they represent. For instance, a trash icon should be named trash, not delete. You can still add related keywords to improve discoverability. Relation with Grid: Draw your icons in a bounding box that plays well with your grid. This makes for a better pairing with other UI elements. A good example of this would be icons with bounding boxes paired with text. Sizes: Provide different sizes for icons that correlate to your grid. Provide a minimum size and remove unnecessary detail for your icons for smaller sizes. Keywords: Adding keywords will improve the discoverability of each icon and provide a better user experience for anyone using your system. Reserved Icons: Reserving icons that represent common actions will prevent their use in any other context. System icons for navigation or adding and deleting are a good example. This leads to a more intuitive user experience. Guidelines: Provide guidelines on how and when to use icons, what to keep in mind when working with them and how not to use them. Core Components: Components are the main building blocks for user interfaces. Building a reusable component library enhances your product development workflow by reducing design and tech debt and speeding up the process. Core components can\u2019t be broken down into granular pieces without losing their meaning. Avatar: Avatars are used to show a thumbnail of a user photo or a visual representation of any other type of content. Image: Avatars should mask an image into their shape and work with any image size since they may get this image from unknown data sources.","title":"Design System"},{"location":"design/tasklist/#raw-markdown","text":"Here's the raw Markdown for you to use.","title":"Raw Markdown"},{"location":"journal/","text":"","title":"Index"},{"location":"journal/2022/april/","text":"April 26 Time Worked: 6 hours April 27 [6:53am] The first day I'm writing here. I have another dev journal, but I'll start anew here. Last night, I quickly setup the new design for the landing page that's a step better than before. Today I'll set things up to use in Next.js. I set it up enough that I had a complete system, but I'll want to revisit the styling. I used Next's module css system, but found that they want you to use their own classing system. I thought it would be better to develop it seperately in Sass, and just globally import what's necessary, which should be almost all of it. The new design uses a fun color scheme. I'll want to play around with it later to create more components. I noticed an issue with some of the button colors, so I'll want to expand my color palette a bit. I'm using a gradient scheme, but it clashes with semantic colors as the opposite side of the gradient is a maroon red, which means it can't really be used for button color. Anyways, I'll figure it out. I'll just probably switch up the gradient with an academic gold. For now, I'll quickly write up the landing page, which shouldn't take much time and \"setup\", the only 3 components I see are the header, text-input, and button, with the latter two being omitted in the final product until I can setup an API to take in the email. Anywho, for today, I'll have the landing done, then create the design for the blog which should take me the rest of the day, realistically. By the end I'll want to then organize my documentation here a little bit and have it out there. I have a dentist's appointment. Hopefully it won't take too much time. It should just be a checkup, and I'll be back to work. Time Worked: 6.5 hours April 28 [1:03pm] Looking back, I'm unhappy with my hours yesterday. I woke up early, and I should've been able to work for most of the day. I'll make up for it today. I'm currently working on implementing the blog. I just wanted to add some things here to put on the blog later on. Fix loading jank (mostly caused by waiting for the css to load in google fonts, which after it's cached it doesn't become a problem, but I want to at least make the initial load clean) [3:04pm] The blog is going to take some time, but I figured out how to set it up. The real problem so far is the mess that this is becoming. I'll really need to take a moment and break this website down when I eventually have to. For now, just finish it. Time Worked: 7.5 hours April 29 [7:13am] I'm still surprised I only worked seven and a half hours yesterday. It felt much longer. I blame the fact that I forget to turn the timer on and still work. But, I finished the blog finally. I'll have to rewrite my first post, as it's something I rambled together quickly to just have up there when I make it live for the first time. A few things to remember for later: Add social media support personal social media (of author >.>) share with others Make all pages responsive Make the blog header a link with a hover style Today I'm just going to be refactoring and reorganizing code. I made a mess creating the website last night, I just want to have it cleaned. Then I'll create the designs for the \"Plans\" and \"About Me\" section, which shouldn't take too long. I'll think of how to reorganize it here because it's a bit of a confusion. So I can split it up into two things to organize: Style, and code. The SASS styling can be split up further into page styles, and then component styles. Page styles will be imported into the main, global sass file. I'll want to break up the page into various components then, and show that through code. Then I'll go through their styles. There are some things that are tricky. The header, for example, highlights depending on what's the current active link or path. If a turn it into a component, I need some way to check. I think I can do it easily enough however by simply making it a prop that tells the link what path is active, and then subsequently adds an active class to the active link. I'll also want to create a better design system. So far, only the colors are really part of the \"system\", and perhaps some components. But I can make it better. One of the things is whether I use a tagging system like .mn--post-card.mn--small or just .mn--post-card-small for the component class. Some research is necessary. I'll look into Sass styling architectures. [7:57am] Whenever I do Sass styling, I don't do any form of nesting. Perhaps I should. [10:11am] Okay, I've cleaned a bit . Not enough, but enough that I can work on the next two pages without feeling messy. After finishing the surface-site (I'm calling it that, I can't figure out a name), I'll go on to create the design system a little more thoroughly. But now, I got to return to the documentation and finishing up my user stories. I'll put this page up using github pages instead of cloudflare's pages. [11:56am] Done, although there wasn't much to do. Next thing I want to do is create the plans and about me section. I'll clean it up a bit more, and then begin work on the design system. Ah, actually I have a bit more to do. I'll want to set up the tasklist for the design system. I thought to make user stories with it, but I think there's a limit to how much I can stretch the concept. I'll instead just create a normal tasklist. [2:14pm] My breaks are becoming too long, a sign that I'm becoming disinterested. Not very good. I have to create a feature page now, and I realized I needed to create content. However, the content I create will have to be in static html. I think I'm going to make it a markdown file that nextjs automatically renders, as I'll likely have to update it and I'm not going to deal with the mess of editing html. I'll create the content first, then integrate it. [8:10pm] I haven't done as much as I wished today. I worked a lot, but a good chunk of it had been spent writing rambly content for my website. I finished the the website, but I rushed the about me and \"vision\" page so it's a bit sloppy, but I'll improve them eventually. I'll want to focus now on getting a start on the design system. I'll decide later whether to come back on them and improve them with my designed system. For now, a lot of typing and creative thinking. Ugh. Time Worked: 9 hours April 30 [9:17am] Woke up a little later today, but that's okay. Today I'm just creating the first iteration of the design system. There are some things that can be improved from the work I did yesterday, mostly under the \"language\" part of it. There's also the concern of accessibility which I find myself having trouble with. The guidelines aren't just \"do this for this\", they use a lot of jargon and technical stuff that makes it more complicated than it needs to be. But that's the nature of standards, usually. I'll just have to go through it. I don't have to care about accessibility on a personal project, but I find importance and obligation in it. If I would help a blind man cross my street, then I would help a blind man navigate my website. And it goes with other disabilities as well. It's just basic human decency, especially if my project is something they find value in. The biggest danger is that I feel it isn't important enough, but I will try regardless. Anyways, I got to work on the dsign system today. I highly doubt I'll finish it today, but I'll want to set up a new repository where I can work on creating all the components without needing to feel tied to it. A concern is typography. Working on a font requires a lot more study, research, and experience than I'm willing to put in this early into the design. I went with IBM's Plex font so far, but I think I'll check out Knuth's Computer Modern just for the nerdyness of it. [10:52am] Okay, I'm sticking with the IBM typography. [11:37am] AAGHGHGHAAHGH. I hate colour schemes. I've been stuck on this for an hour and a half, trying to pick colours. I have a colour scheme already, but it uses cool colours, and I wanted my website to be warm. However, warm colours look ugly. Bah, I'm an academic website, I don't need to be warm. Agh, and I have to create icons and stuff too. Or at least find some. Okay, I can do this, but I need a space I can collect all of my stuff in so I can use later. [11:50am] I got in in way over my head. Is it too late? The thing is, going with a design system can become limiting. But okay, lets split this up into manageable pieces: Should I create a new repository for my design system? No, that is insane. Work within the website itself using sass and components. Do I need to have a css grid system instead of a flex-box system for my design? That's the way design systems seem to lean towards, however it's not that simple. It's more like how padding, margins, sizing and spacing is made consistent. So for example, allowing only options of 16px, 24px, 32px. Apparently, people in Sass make their own grid system. How do I organize my design system? Where do I create it then if I can't make a repository? You organize it in your website through components and sass. Don't create a design system, just create the seeds of one. If I'm working on a very large project, I feel a design system is necessary if I wish to extend it, update it and maintain it easily. It'll allow me to also learn and think of my website in an organized method. fine Use storybook to build your design system components. Use figma for coming up with the actual designs of these components How do i know what components to use? You don't. Your project can turn a many ways. Instead create components that are universally [1:01p] Storybook looks promising. They have a nice article on creating a design system that I want to look at after figuring out how to use storybook. It doesn't address things like spacing, and Sass however. I think I'll just use the Carbon Design System's method, which is to just make the sass seperate from the JSX component exports. Then after that you create a folder that contains all the components in a holistic style. [2:16pm] I set up storybook, now I'm dealing with the problem of figuring out what buttons I need. Okay, so now to create a whole system, I'll need storybook to use a main.scss file, using a sass folder that I have. I'll want to look into proper class creation in sass. For now, lets create a simple button component. [3:27pm] I created it, but I'm unhappy with the way storybook displays css. It says it's a UI constructor, but their Sass support is horrid. Anyways, I made it work. What's the point of being a UI constructor, if it's hard to do basic styling? Bah, anyways. Atleast it autoloads components into a system that I can see and manipulate fairly quickly. I did look into class naming, and I'm going to follow this guy's: https://bradfrost.com/blog/post/css-architecture-for-design-systems/ But my eyes are bleeding now. I've been staring at a screen for 4 hours straight trying to understand this. But now that I have something set up, I can begin work. I have to question how to organize sass. My components each have their own sass file, but I think I'll take everything and put it into a seperate sass folder to use. [4:21pm] My brain was turning to mush so I took a short break. Just a note for the future: Use GraphQL. [9:16pm] I'm calling it in for the day. A few things: I gave up with storybook. The way I wanted to implement my component styles, which was as a global sass stylesheet, was incompatable with it for some reason. I couldn't debug, so I just said \"screw it\" and made a Next.js app with an empty page that displays the components I set in. So far the design is nice. I \"finished\" the buttons. I still have to do the \"disabled\" state of the button, but so far the buttons are usable. I'm working currently on the text input, and that should be enough for me to get started. I questioned whether to even use figma for setting up my components, as it felt like I was set up to just make them in css anyways. At most, I'd figure out the layout, but I feel like I could do that on pen and paper, then just use the component method to implement it. Today was one of those days where I worked a lot, but felt like progress was little. I have a design system started, but it's going to be a lot of work. I'll want to go through the design more efficiently and quickly. I'm going to use a free set of icons to use with my system as well. Tomorrow I might take it a bit more easy. Struggling with storybook really took a lot of my energy away. I want to try and re-write my main website content, and then write a few ideas for interesting media to incorporate with my website. For some reason, I'm thinking of a small green tree, on a white pot. An ocean is out there. Sort of like that. But anyways, I'm going to go sleep now and wake up tomorrow. I want to think a little more about my plan, I'm getting a little lost over what I'm doing and want to stop designing. Now that I have the design method set up, I should be focusing instead on implementing features. Create components and designs based on the log-in form for example. I should try and create the tickets for monalect and start a trello board. But anyways, I'm getting dead tired. I'll see you tomorrow. Time Worked: 8 hours","title":"April"},{"location":"journal/2022/april/#april-26","text":"Time Worked: 6 hours","title":"April 26"},{"location":"journal/2022/april/#april-27","text":"[6:53am] The first day I'm writing here. I have another dev journal, but I'll start anew here. Last night, I quickly setup the new design for the landing page that's a step better than before. Today I'll set things up to use in Next.js. I set it up enough that I had a complete system, but I'll want to revisit the styling. I used Next's module css system, but found that they want you to use their own classing system. I thought it would be better to develop it seperately in Sass, and just globally import what's necessary, which should be almost all of it. The new design uses a fun color scheme. I'll want to play around with it later to create more components. I noticed an issue with some of the button colors, so I'll want to expand my color palette a bit. I'm using a gradient scheme, but it clashes with semantic colors as the opposite side of the gradient is a maroon red, which means it can't really be used for button color. Anyways, I'll figure it out. I'll just probably switch up the gradient with an academic gold. For now, I'll quickly write up the landing page, which shouldn't take much time and \"setup\", the only 3 components I see are the header, text-input, and button, with the latter two being omitted in the final product until I can setup an API to take in the email. Anywho, for today, I'll have the landing done, then create the design for the blog which should take me the rest of the day, realistically. By the end I'll want to then organize my documentation here a little bit and have it out there. I have a dentist's appointment. Hopefully it won't take too much time. It should just be a checkup, and I'll be back to work. Time Worked: 6.5 hours","title":"April 27"},{"location":"journal/2022/april/#april-28","text":"[1:03pm] Looking back, I'm unhappy with my hours yesterday. I woke up early, and I should've been able to work for most of the day. I'll make up for it today. I'm currently working on implementing the blog. I just wanted to add some things here to put on the blog later on. Fix loading jank (mostly caused by waiting for the css to load in google fonts, which after it's cached it doesn't become a problem, but I want to at least make the initial load clean) [3:04pm] The blog is going to take some time, but I figured out how to set it up. The real problem so far is the mess that this is becoming. I'll really need to take a moment and break this website down when I eventually have to. For now, just finish it. Time Worked: 7.5 hours","title":"April 28"},{"location":"journal/2022/april/#april-29","text":"[7:13am] I'm still surprised I only worked seven and a half hours yesterday. It felt much longer. I blame the fact that I forget to turn the timer on and still work. But, I finished the blog finally. I'll have to rewrite my first post, as it's something I rambled together quickly to just have up there when I make it live for the first time. A few things to remember for later: Add social media support personal social media (of author >.>) share with others Make all pages responsive Make the blog header a link with a hover style Today I'm just going to be refactoring and reorganizing code. I made a mess creating the website last night, I just want to have it cleaned. Then I'll create the designs for the \"Plans\" and \"About Me\" section, which shouldn't take too long. I'll think of how to reorganize it here because it's a bit of a confusion. So I can split it up into two things to organize: Style, and code. The SASS styling can be split up further into page styles, and then component styles. Page styles will be imported into the main, global sass file. I'll want to break up the page into various components then, and show that through code. Then I'll go through their styles. There are some things that are tricky. The header, for example, highlights depending on what's the current active link or path. If a turn it into a component, I need some way to check. I think I can do it easily enough however by simply making it a prop that tells the link what path is active, and then subsequently adds an active class to the active link. I'll also want to create a better design system. So far, only the colors are really part of the \"system\", and perhaps some components. But I can make it better. One of the things is whether I use a tagging system like .mn--post-card.mn--small or just .mn--post-card-small for the component class. Some research is necessary. I'll look into Sass styling architectures. [7:57am] Whenever I do Sass styling, I don't do any form of nesting. Perhaps I should. [10:11am] Okay, I've cleaned a bit . Not enough, but enough that I can work on the next two pages without feeling messy. After finishing the surface-site (I'm calling it that, I can't figure out a name), I'll go on to create the design system a little more thoroughly. But now, I got to return to the documentation and finishing up my user stories. I'll put this page up using github pages instead of cloudflare's pages. [11:56am] Done, although there wasn't much to do. Next thing I want to do is create the plans and about me section. I'll clean it up a bit more, and then begin work on the design system. Ah, actually I have a bit more to do. I'll want to set up the tasklist for the design system. I thought to make user stories with it, but I think there's a limit to how much I can stretch the concept. I'll instead just create a normal tasklist. [2:14pm] My breaks are becoming too long, a sign that I'm becoming disinterested. Not very good. I have to create a feature page now, and I realized I needed to create content. However, the content I create will have to be in static html. I think I'm going to make it a markdown file that nextjs automatically renders, as I'll likely have to update it and I'm not going to deal with the mess of editing html. I'll create the content first, then integrate it. [8:10pm] I haven't done as much as I wished today. I worked a lot, but a good chunk of it had been spent writing rambly content for my website. I finished the the website, but I rushed the about me and \"vision\" page so it's a bit sloppy, but I'll improve them eventually. I'll want to focus now on getting a start on the design system. I'll decide later whether to come back on them and improve them with my designed system. For now, a lot of typing and creative thinking. Ugh. Time Worked: 9 hours","title":"April 29"},{"location":"journal/2022/april/#april-30","text":"[9:17am] Woke up a little later today, but that's okay. Today I'm just creating the first iteration of the design system. There are some things that can be improved from the work I did yesterday, mostly under the \"language\" part of it. There's also the concern of accessibility which I find myself having trouble with. The guidelines aren't just \"do this for this\", they use a lot of jargon and technical stuff that makes it more complicated than it needs to be. But that's the nature of standards, usually. I'll just have to go through it. I don't have to care about accessibility on a personal project, but I find importance and obligation in it. If I would help a blind man cross my street, then I would help a blind man navigate my website. And it goes with other disabilities as well. It's just basic human decency, especially if my project is something they find value in. The biggest danger is that I feel it isn't important enough, but I will try regardless. Anyways, I got to work on the dsign system today. I highly doubt I'll finish it today, but I'll want to set up a new repository where I can work on creating all the components without needing to feel tied to it. A concern is typography. Working on a font requires a lot more study, research, and experience than I'm willing to put in this early into the design. I went with IBM's Plex font so far, but I think I'll check out Knuth's Computer Modern just for the nerdyness of it. [10:52am] Okay, I'm sticking with the IBM typography. [11:37am] AAGHGHGHAAHGH. I hate colour schemes. I've been stuck on this for an hour and a half, trying to pick colours. I have a colour scheme already, but it uses cool colours, and I wanted my website to be warm. However, warm colours look ugly. Bah, I'm an academic website, I don't need to be warm. Agh, and I have to create icons and stuff too. Or at least find some. Okay, I can do this, but I need a space I can collect all of my stuff in so I can use later. [11:50am] I got in in way over my head. Is it too late? The thing is, going with a design system can become limiting. But okay, lets split this up into manageable pieces: Should I create a new repository for my design system? No, that is insane. Work within the website itself using sass and components. Do I need to have a css grid system instead of a flex-box system for my design? That's the way design systems seem to lean towards, however it's not that simple. It's more like how padding, margins, sizing and spacing is made consistent. So for example, allowing only options of 16px, 24px, 32px. Apparently, people in Sass make their own grid system. How do I organize my design system? Where do I create it then if I can't make a repository? You organize it in your website through components and sass. Don't create a design system, just create the seeds of one. If I'm working on a very large project, I feel a design system is necessary if I wish to extend it, update it and maintain it easily. It'll allow me to also learn and think of my website in an organized method. fine Use storybook to build your design system components. Use figma for coming up with the actual designs of these components How do i know what components to use? You don't. Your project can turn a many ways. Instead create components that are universally [1:01p] Storybook looks promising. They have a nice article on creating a design system that I want to look at after figuring out how to use storybook. It doesn't address things like spacing, and Sass however. I think I'll just use the Carbon Design System's method, which is to just make the sass seperate from the JSX component exports. Then after that you create a folder that contains all the components in a holistic style. [2:16pm] I set up storybook, now I'm dealing with the problem of figuring out what buttons I need. Okay, so now to create a whole system, I'll need storybook to use a main.scss file, using a sass folder that I have. I'll want to look into proper class creation in sass. For now, lets create a simple button component. [3:27pm] I created it, but I'm unhappy with the way storybook displays css. It says it's a UI constructor, but their Sass support is horrid. Anyways, I made it work. What's the point of being a UI constructor, if it's hard to do basic styling? Bah, anyways. Atleast it autoloads components into a system that I can see and manipulate fairly quickly. I did look into class naming, and I'm going to follow this guy's: https://bradfrost.com/blog/post/css-architecture-for-design-systems/ But my eyes are bleeding now. I've been staring at a screen for 4 hours straight trying to understand this. But now that I have something set up, I can begin work. I have to question how to organize sass. My components each have their own sass file, but I think I'll take everything and put it into a seperate sass folder to use. [4:21pm] My brain was turning to mush so I took a short break. Just a note for the future: Use GraphQL. [9:16pm] I'm calling it in for the day. A few things: I gave up with storybook. The way I wanted to implement my component styles, which was as a global sass stylesheet, was incompatable with it for some reason. I couldn't debug, so I just said \"screw it\" and made a Next.js app with an empty page that displays the components I set in. So far the design is nice. I \"finished\" the buttons. I still have to do the \"disabled\" state of the button, but so far the buttons are usable. I'm working currently on the text input, and that should be enough for me to get started. I questioned whether to even use figma for setting up my components, as it felt like I was set up to just make them in css anyways. At most, I'd figure out the layout, but I feel like I could do that on pen and paper, then just use the component method to implement it. Today was one of those days where I worked a lot, but felt like progress was little. I have a design system started, but it's going to be a lot of work. I'll want to go through the design more efficiently and quickly. I'm going to use a free set of icons to use with my system as well. Tomorrow I might take it a bit more easy. Struggling with storybook really took a lot of my energy away. I want to try and re-write my main website content, and then write a few ideas for interesting media to incorporate with my website. For some reason, I'm thinking of a small green tree, on a white pot. An ocean is out there. Sort of like that. But anyways, I'm going to go sleep now and wake up tomorrow. I want to think a little more about my plan, I'm getting a little lost over what I'm doing and want to stop designing. Now that I have the design method set up, I should be focusing instead on implementing features. Create components and designs based on the log-in form for example. I should try and create the tickets for monalect and start a trello board. But anyways, I'm getting dead tired. I'll see you tomorrow. Time Worked: 8 hours","title":"April 30"},{"location":"stories/marketing/","text":"Marketing Stories Phase 1: Pre-Launch Epic: Pre-Launch Setup Marketing is currently on the backburner until I create the first itertion of the app. These are just preliminaries that will eventually set things up to having some traction when I launch the website. It includes the shallow site (landing page, blog, about me, plans), while the rest of the meat is with Monalect itself. I don't expect to them all at once. Rather, when I get tired of programming or designin Monalect, it's something I can return to or practice on. As a marketer we should have a keyword SEO sheet for use in our marketing content As a marketer, I'd like a pre-launch landing page to make users aware of our product. As a marketer, the page should allow users to be notified when our products launch As a marketer, the page should show our social media links to connect with us more As a marketer, we should be able to receive suggestions from prospective users about what they'd like on our product. As a marketer, our design should show we're serious about this product. As a marketer, the content here should use SEO keywords from our list. As a marketer I'd like a blog to create value so users can come check us out As a marketer, there should be an easy way for me to write blog posts or articles and put them up. As a marketer, I'd like a page to show users of our planned features, and what we've completed so far. As a marketer I'd like a page that shows our contact information so people can reach us if they so wish to. As a marketer the shallow site should be responsive for better SEO As a marketer, frontend metadata of various pages should allow for easy discovery SEO terms Value and content creation As a marketer, I'd like trivial tools made to attract users As a marketer, I'd like checklists people can use to become attracted to our website As a marketer, I'd like videos made that showcase our philosophy and product As a marketer, I'd like the ability to publish blog post at a specific time As a marketer, whenever a blog post is created, I'd like to have it put out to various mediums (pun intended)","title":"Marketing Stories"},{"location":"stories/marketing/#marketing-stories","text":"","title":"Marketing Stories"},{"location":"stories/marketing/#phase-1-pre-launch","text":"","title":"Phase 1: Pre-Launch"},{"location":"stories/marketing/#epic-pre-launch-setup","text":"Marketing is currently on the backburner until I create the first itertion of the app. These are just preliminaries that will eventually set things up to having some traction when I launch the website. It includes the shallow site (landing page, blog, about me, plans), while the rest of the meat is with Monalect itself. I don't expect to them all at once. Rather, when I get tired of programming or designin Monalect, it's something I can return to or practice on. As a marketer we should have a keyword SEO sheet for use in our marketing content As a marketer, I'd like a pre-launch landing page to make users aware of our product. As a marketer, the page should allow users to be notified when our products launch As a marketer, the page should show our social media links to connect with us more As a marketer, we should be able to receive suggestions from prospective users about what they'd like on our product. As a marketer, our design should show we're serious about this product. As a marketer, the content here should use SEO keywords from our list. As a marketer I'd like a blog to create value so users can come check us out As a marketer, there should be an easy way for me to write blog posts or articles and put them up. As a marketer, I'd like a page to show users of our planned features, and what we've completed so far. As a marketer I'd like a page that shows our contact information so people can reach us if they so wish to. As a marketer the shallow site should be responsive for better SEO As a marketer, frontend metadata of various pages should allow for easy discovery SEO terms Value and content creation As a marketer, I'd like trivial tools made to attract users As a marketer, I'd like checklists people can use to become attracted to our website As a marketer, I'd like videos made that showcase our philosophy and product As a marketer, I'd like the ability to publish blog post at a specific time As a marketer, whenever a blog post is created, I'd like to have it put out to various mediums (pun intended)","title":"Epic: Pre-Launch Setup"},{"location":"stories/monalect/","text":"Monalect Stories Phase 1: Create MVP These are the stories for the app itself. The MVP will be the minimum of what I'd find beneficial as a product. I'm lucky in that I'm part of the group that wants to use it, so I have a sense of when it's good enough to use and has positive value. This is that \"good enough.\" The next phase will implement more exciting features, but for now this is what I'm limiting myself to. Epic: User Creation & Management User Creation & Management As a user I should be able to access a form to which I can sign up. As a user I should be able to confirm my email address As a user I should still be able to access my account without confirming my email address As a user I should be able to automatically login once I register As a user I should be able to login Epic: Course Management Course Management As a user I should be able to define the title As a user I should be able to define the description As a user I should be able to manage my questions As a user I should be able to import questions. As a user I want to attach questions to specific lessons As a user I want to be able to remove questions from the list if it doesn't belong As a user I should be able to manage my lessons As a user I should be able to define lesson materials As a user I want to namelessons As a user I want to attach course materials to lessons. As a user I should be able to define the order of my lesssons. As a user I should be able to manage my course materials As a user I should be able to define a textbook as a course material As a user I should be able to define the sections of a textbook As a user I should be able to attach sections to a lesson As a user I should be able to define the metadata of the textbook As a user I should be able to define an article as a course material As a user I should be able to attach an article to a lesson As a user I should be able to upload an article as a user I should be able to save my course as a draft as a user I should be able to import a course template and modify it to my liking as a user I should be able to export my course after creating them as a user I should be able to access premade courses so I don't even have to think about creation Epic: Course Completion The actual act of going through a course and studying it. The meat of the program. Course Completion Notebook As a user I want to be able to format my notebook. As a user I want to be able to access my textbook while writing notes. As a user I want to create questions while writing notes. As a user I should be able to see how much words I've written. As a user I should be able to see progress towards certain goals. Text Reader As a user I should be able to read my learning materials As a user I should be able to see what lesson I'm on when reading a textbook or article As a user I should be able to jump to pages at the start of each lesson As a user I should be able to access my notebook while reading As a user I should be able to create a question while reading As a user I should be able to access the last textbook I opened when I open it again As a user I should be able to redownload my textbook As a user I should be able to highlight my texts (last priority) Questions As a user I should be able to reassign my questions As a user I should be able to CRUD operations on a question As a user, answers should be hidden from me so I don't spoil myself everytime I want to edit questions As a user I should be able to create a test for these questions. As a user I should be able to export my questions As a user I should be able to review my questions Goals As a user I should be able to CRUD goals As a user I should be able to automatically receive goals after they've completed As a user I should be able to see my goals as I progress through them on other pages As a user I should see a list of my previous completed goals/accomplishments Quizzes & Exams As a user I should be able to quiz myself against questions without worry. As a user I should be able to see if I got it wrong right after I answer As a user I should be able to examinate myself against questions to formally measure my knowledge. As a user I should also be able to do practice exams to see my level without recording my mark As a user I shouldn't feel discouraged as I go through these questions that I quit before finishing it As a user I should be able to choose the number of questions from each lesson I test against Completion As a user I want to be able to review completed courses As a user I want to see how long since I reviewed it so I can restudy it when necessary As a user I want to be able to \"uncomplete\" a course and access it","title":"Monalect Stories"},{"location":"stories/monalect/#monalect-stories","text":"","title":"Monalect Stories"},{"location":"stories/monalect/#phase-1-create-mvp","text":"These are the stories for the app itself. The MVP will be the minimum of what I'd find beneficial as a product. I'm lucky in that I'm part of the group that wants to use it, so I have a sense of when it's good enough to use and has positive value. This is that \"good enough.\" The next phase will implement more exciting features, but for now this is what I'm limiting myself to.","title":"Phase 1: Create MVP"},{"location":"stories/monalect/#epic-user-creation-management","text":"User Creation & Management As a user I should be able to access a form to which I can sign up. As a user I should be able to confirm my email address As a user I should still be able to access my account without confirming my email address As a user I should be able to automatically login once I register As a user I should be able to login","title":"Epic: User Creation &amp; Management"},{"location":"stories/monalect/#epic-course-management","text":"Course Management As a user I should be able to define the title As a user I should be able to define the description As a user I should be able to manage my questions As a user I should be able to import questions. As a user I want to attach questions to specific lessons As a user I want to be able to remove questions from the list if it doesn't belong As a user I should be able to manage my lessons As a user I should be able to define lesson materials As a user I want to namelessons As a user I want to attach course materials to lessons. As a user I should be able to define the order of my lesssons. As a user I should be able to manage my course materials As a user I should be able to define a textbook as a course material As a user I should be able to define the sections of a textbook As a user I should be able to attach sections to a lesson As a user I should be able to define the metadata of the textbook As a user I should be able to define an article as a course material As a user I should be able to attach an article to a lesson As a user I should be able to upload an article as a user I should be able to save my course as a draft as a user I should be able to import a course template and modify it to my liking as a user I should be able to export my course after creating them as a user I should be able to access premade courses so I don't even have to think about creation","title":"Epic: Course Management"},{"location":"stories/monalect/#epic-course-completion","text":"The actual act of going through a course and studying it. The meat of the program. Course Completion Notebook As a user I want to be able to format my notebook. As a user I want to be able to access my textbook while writing notes. As a user I want to create questions while writing notes. As a user I should be able to see how much words I've written. As a user I should be able to see progress towards certain goals. Text Reader As a user I should be able to read my learning materials As a user I should be able to see what lesson I'm on when reading a textbook or article As a user I should be able to jump to pages at the start of each lesson As a user I should be able to access my notebook while reading As a user I should be able to create a question while reading As a user I should be able to access the last textbook I opened when I open it again As a user I should be able to redownload my textbook As a user I should be able to highlight my texts (last priority) Questions As a user I should be able to reassign my questions As a user I should be able to CRUD operations on a question As a user, answers should be hidden from me so I don't spoil myself everytime I want to edit questions As a user I should be able to create a test for these questions. As a user I should be able to export my questions As a user I should be able to review my questions Goals As a user I should be able to CRUD goals As a user I should be able to automatically receive goals after they've completed As a user I should be able to see my goals as I progress through them on other pages As a user I should see a list of my previous completed goals/accomplishments Quizzes & Exams As a user I should be able to quiz myself against questions without worry. As a user I should be able to see if I got it wrong right after I answer As a user I should be able to examinate myself against questions to formally measure my knowledge. As a user I should also be able to do practice exams to see my level without recording my mark As a user I shouldn't feel discouraged as I go through these questions that I quit before finishing it As a user I should be able to choose the number of questions from each lesson I test against Completion As a user I want to be able to review completed courses As a user I want to see how long since I reviewed it so I can restudy it when necessary As a user I want to be able to \"uncomplete\" a course and access it","title":"Epic: Course Completion"}]}